{"version":3,"sources":["n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/reducers/loaderReducer.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m1-ui/common/Loader/Loader.tsx","n1-main/m1-ui/Main/Pages/p1-login/Login.tsx","n1-main/m4-utils/validators/validators.ts","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m1-ui/Main/Pages/p2-register/Register.tsx","n1-main/m2-bll/reducers/passwordRecoveryReducer.ts","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/p4-newPassword/NewPassword.tsx","n1-main/m1-ui/Main/Pages/p5-profile/Profile.tsx","n1-main/m2-bll/reducers/dataForGetRequestReducer.ts","n1-main/m2-bll/reducers/packsReducer.ts","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/CommonSlider/CommonSlider.tsx","n1-main/m1-ui/Main/Pages/p6-packs/Paginator/Paginator.tsx","n1-main/m1-ui/Main/Pages/p6-packs/Packs.tsx","n1-main/m1-ui/Main/Pages/p7-cards/Cards.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/Main/Pages/p2-register/Register.module.css","n1-main/m1-ui/common/Table/Table.module.css","n1-main/m1-ui/Main/Pages/p1-login/Login.module.css","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/common/CommonSlider/CommonSlider.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Loader/Loader.module.css","n1-main/m1-ui/Main/Pages/p6-packs/Packs.module.css"],"names":["NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Input","React","memo","name","id","rest","input","Button","button","instance","axios","create","withCredentials","baseURL","authAPI","post","authUserData","delete","registrationAPI","email","password","forgotAPI","from","message","packsAPI","userID","pageCount","page","get","packName","min","max","sortPacks","cardsPack","put","_id","InitialState","rememberMe","isAdmin","verified","publicCardPacksCount","created","updated","__v","token","tokenDeathTime","avatar","setDeleteUserProfile","user","type","status","SetStatusAC","isAuth","setIsAuth","Loader","ldsRing","Login","dispatch","useDispatch","useSelector","state","login","loader","formik","useFormik","initialValues","validate","values","errors","test","length","validateLoginForm","onSubmit","then","response","data","catch","err","error","console","log","formContainer","handleSubmit","placeholder","getFieldProps","isRegistered","serverError","RegisterUserAC","Register","register","repeatPassword","validateRegisterForm","res","useEffect","errorElement","containerForm","form","serverResponse","SaveServerResponseAC","answer","SaveServerErrorAC","PasswordRecovery","passwordRecover","validatePasswordRecoveryForm","setEmailToChangePasswordAC","info","forgotStyle","formForgot","onFocus","disabled","NewPassword","Profile","profile","onClick","initialState","checkedMyPacks","cardPacksTotalCount","searchStatus","setPackNameAC","setMinAC","setMaxAC","setSortPacksAC","setPageAC","setCheckedMyPacksAC","checked","setPacksTotalCountAC","TotalCount","cardPacks","user_id","user_name","private","path","grade","shots","cardsCount","rating","more_id","deckCover","minCardsCount","maxCardsCount","setPacks","packs","getPacksAndMyPacksTC","alert","getPacksAndMyPacksWithSearchTC","Table","dataGetRequest","onClickDeletePack","deletePackAC","deletePackTC","onClickUpdatePack","newName","updatePackAC","updatePackTC","Styles","table","arrow","pack","newCardsPack","map","row","key","useStyles","makeStyles","root","width","color","CommonSlider","classes","container","value","Slider","onChange","event","newValue","setValue","valueLabelDisplay","aria-labelledby","Paginator","HowManyCounts","Math","ceil","e","setPageCountAC","currentTarget","containerPages","Pagination","count","Packs","useState","search","formStyle","Checkbox","card","Question","Answer","Grade","Update","Url","Cards","Routes","routes","render","Main","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","newPassword","filter","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.11f7c787.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {cards, login, newPassword, packs, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n            <NavLinkCommon to={packs} linkName={'Packs'}/>\r\n            <NavLinkCommon to={cards} linkName={'Cards'}/>\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';\r\nexport const packs: string = '/packs';\r\nexport const cards: string = '/cards';","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType =\r\n    React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & {\r\n    name?: string,\r\n    id?: string\r\n};\r\n\r\nexport const Input : FC<InputPropsType> = React.memo (({name,id,...rest}) => {\r\n    return <input className={style.input} {...rest} id={id} ></input>\r\n})","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button: FC<ButtonPropsType> = React.memo(({name, ...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n})","import axios from 'axios';\r\nimport {InitialStateType} from '../m2-bll/reducers/packsReducer';\r\nimport {sortPacksType} from \"../m2-bll/reducers/dataForGetRequestReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<AuthResponseType>('/auth/me', {})\r\n    },\r\n    login(authUserData: AuthUserData) {\r\n        return instance.post<AuthResponseType>('/auth/login', {...authUserData})\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/me')\r\n    },\r\n}\r\n\r\nexport const registrationAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password});\r\n    }\r\n}\r\n\r\nexport const forgotAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<ResponseType>('/auth/forgot', {\r\n            email: email,\r\n            from: 'test-front-admin',\r\n            message: `<div style=\"background-color: gold; padding: 15px\">Password recover link:\r\n                    <a href=\"https://alekseidarafeichyk.github.io/cards/#/new_password/$token$\">link</a>\r\n                </div>`\r\n        })\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacksAndMyPacks(userID = \"\", pageCount = 4, page = 1) {\r\n        return instance.get<InitialStateType>(`/cards/pack?pageCount=${pageCount}&page=${page}&user_id=${userID}`)\r\n    },\r\n    getPacksAndMyPacksWithSearch(userID: string | undefined, packName = \"\", min = 0, max = 100, pageCount = 10, page: number | undefined, sortPacks: sortPacksType | undefined) {\r\n        return instance.get<InitialStateType>(`/cards/pack?packName=${packName}&min=${min}&max=${max}&pageCount=${pageCount}&page=${page}&user_id=${userID}&sortPacks=${sortPacks}`)\r\n    },\r\n    addPack() {\r\n        return instance.post('/cards/pack', {cardsPack: {name: \"check adding\"}})\r\n    },\r\n    deletePack(id: string | null) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(id: string | null, name: string) {\r\n        return instance.put('/cards/pack', {cardsPack: {_id: id, name}})\r\n    },\r\n}\r\n\r\n\r\n// Types\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    __v: number,\r\n    token: string,\r\n    tokenDeathTime: number\r\n    avatar?: string\r\n}\r\nexport type AuthUserData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n}","import {AuthResponseType} from '../../m3-dal/api';\r\n\r\nconst InitialState : AuthResponseType = {\r\n    _id:'',\r\n    email:'',\r\n    rememberMe:false,\r\n    isAdmin:false,\r\n    name:'',\r\n    verified:false,\r\n    publicCardPacksCount:0,\r\n    created:'',\r\n    updated:'',\r\n    __v:0,\r\n    token:'',\r\n    tokenDeathTime: 0,\r\n    avatar: 'Some avatar'\r\n}\r\n\r\nexport const profileReducer = (state = InitialState, action: ActionsType): AuthResponseType => {\r\n    switch (action.type) {\r\n        case 'SET-DELETE-USER': {\r\n            return {...state, ...action.user}\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setDeleteUserProfile = (user: AuthResponseType) =>({type: 'SET-DELETE-USER', user} as const)\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setDeleteUserProfile>","import {RequestStatusType} from './registerReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    status: 'idle'\r\n}\r\n\r\n\r\nexport const loaderReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const SetStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'SET_STATUS', status} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof SetStatusAC>\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n}","import {authAPI, AuthUserData} from '../../m3-dal/api';\r\nimport {Dispatch} from 'redux';\r\nimport {setDeleteUserProfile} from './profileReducer';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState = {\r\n    isAuth: false,\r\n    status: 'idle'\r\n}\r\n\r\ntype initialStateType = typeof InitialState\r\n\r\nexport const loginReducer = (state: initialStateType = InitialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET_IS_AUTH':\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\nconst setIsAuth = (isAuth: boolean) => ({type: 'LOGIN/SET_IS_AUTH', isAuth} as const)\r\n\r\n// Thunks\r\nexport const LogIn = (authUserData: AuthUserData) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.login({...authUserData})\r\n        .then(response => {\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n}\r\nexport const LogOut = () => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            const defaultUserProfile = {\r\n                _id: '',\r\n                email: '',\r\n                rememberMe: false,\r\n                isAdmin: false,\r\n                name: '',\r\n                verified: false,\r\n                publicCardPacksCount: 0,\r\n                created: '',\r\n                updated: '',\r\n                __v: 0,\r\n                token: '',\r\n                tokenDeathTime: 0,\r\n                avatar: 'Some avatar'\r\n            }\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(defaultUserProfile))\r\n            dispatch(setIsAuth(false))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        })\r\n        .catch(err => {\r\n            let error = err.response ? err.response.data.error : err.message\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n// Types\r\ntype ActionsTypes =\r\n    | ReturnType<typeof setIsAuth>\r\n    | ReturnType<typeof setDeleteUserProfile>\r\n    | ReturnType<typeof SetStatusAC>\r\n","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return <div className={style.ldsRing}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogIn} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from './Login.module.css'\r\nimport {profile} from '../../../routes/RoutePass';\r\nimport {validateLoginForm} from '../../../../m4-utils/validators/validators';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport type AuthData = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector((state: RootState) => state.login.isAuth)\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateLoginForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LogIn({...values}))\r\n\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={profile}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.formContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input\r\n                    id={'email'}\r\n                    type={'text'}\r\n                    placeholder={'Enter your email'}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input\r\n                    id={'password'}\r\n                    placeholder={'password'}\r\n                    type={'password'}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                remember me <input\r\n                type={'checkbox'}\r\n                {...formik.getFieldProps('rememberMe')}\r\n            />\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name=\"Sign In\"/>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {RegisterErrorType} from '../../m1-ui/Main/Pages/p2-register/Register';\r\nimport {AuthData} from '../../m1-ui/Main/Pages/p1-login/Login';\r\n\r\ntype valuesRegisterForm = {\r\n    email : string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const validateRegisterForm = (values: valuesRegisterForm, errors:RegisterErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n   if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n\r\n    if (!values?.repeatPassword) {\r\n        errors.repeatPassword = 'Field is required';\r\n    } else if (values.repeatPassword.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validateLoginForm = (values:valuesRegisterForm,errors: AuthData) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validatePasswordRecoveryForm = (values:valuesRegisterForm,errors: {email?: string}) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../m3-dal/api';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    isRegistered: false,\r\n    serverError: '',\r\n    status: 'idle'\r\n}\r\n\r\nexport const registerReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER_USER': {\r\n            return {\r\n                ...state,\r\n                isRegistered: action.isRegistered,\r\n                serverError: action.error ? action.error : ''\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const RegisterUserAC = (isRegistered: boolean, error = '') =>\r\n    ({type: 'REGISTER_USER', isRegistered, error} as const);\r\n\r\n//thunks\r\nexport const RegisterUserTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC('loading'));\r\n    registrationAPI.registration(email, password)\r\n        .then(res => {\r\n            dispatch(SetStatusAC('succeeded'));\r\n            dispatch(RegisterUserAC(true));\r\n        })\r\n        .catch(error => {\r\n            dispatch(SetStatusAC('failed'));\r\n            dispatch(RegisterUserAC(false, error.response.data.error));\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    isRegistered: boolean,\r\n    serverError: string,\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof RegisterUserAC>\r\n    | ReturnType<typeof SetStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React, {useEffect} from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport style from './Register.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    InitialStateType,\r\n    RegisterUserAC,\r\n    RegisterUserTC,\r\n    RequestStatusType\r\n} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validateRegisterForm} from '../../../../m4-utils/validators/validators';\r\n\r\nexport type RegisterErrorType = {\r\n    email?: string | undefined\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistered, serverError} = useSelector<RootState, InitialStateType>(state => state.register)\r\n    const status = useSelector<RootState,RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },validate: (values) => {\r\n            const errors: RegisterErrorType = {};\r\n            validateRegisterForm(values ,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterUserTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    useEffect(()=>{\r\n     return ()=>{\r\n         dispatch(RegisterUserAC(false))\r\n     }\r\n    },[dispatch])\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const errorElement = serverError ? <div className={style.error}>{serverError}</div> : null\r\n    return (\r\n        <div className={style.containerForm}>\r\n            <form className={style.form} onSubmit={formik.handleSubmit}>\r\n                <Input type={'text'}\r\n                       id={'email'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'password'}\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'repeatPassword'}\r\n                       placeholder={'Repeat password'}\r\n                       {...formik.getFieldProps('repeatPassword')}\r\n                />\r\n                {formik.errors.repeatPassword ? <div className={style.error}>{formik.errors.repeatPassword}</div> : null}\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name={'Register'}/>\r\n                }\r\n            </form>\r\n            {errorElement}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {forgotAPI} from \"../../m3-dal/api\";\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    email: \"\",\r\n    serverResponse: \"\",\r\n    serverError: \"\",\r\n    status: \"idle\"\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = InitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"EMAIL_TO_CHANGE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        case \"SAVE_SERVER_RESPONSE\":\r\n            return {\r\n                ...state,\r\n                serverResponse: action.answer\r\n            }\r\n        case \"SAVE_SERVER_ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setEmailToChangePasswordAC = (email: string) => ({type: 'EMAIL_TO_CHANGE_PASSWORD', email} as const)\r\nexport const SaveServerResponseAC = (answer: string) => ({type: 'SAVE_SERVER_RESPONSE', answer} as const)\r\nexport const SaveServerErrorAC = (error: string) => ({type: 'SAVE_SERVER_ERROR', error} as const)\r\n\r\nexport const passwordRecoveryTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC(\"loading\"))\r\n    forgotAPI.forgot(email)\r\n        .then((res) => {\r\n            dispatch(SetStatusAC(\"succeeded\"))\r\n            dispatch(setEmailToChangePasswordAC(email))\r\n            dispatch(SaveServerResponseAC(res.data.info))\r\n        })\r\n        .catch((err: serverErrorType) => {\r\n            dispatch(SetStatusAC(\"failed\"))\r\n            dispatch(SaveServerErrorAC(err.response.data.error))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = {\r\n    email: string\r\n    serverResponse: string\r\n    serverError: string\r\n    status: RequestStatusType\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setEmailToChangePasswordAC>\r\n    | ReturnType<typeof SaveServerResponseAC>\r\n    | ReturnType<typeof SaveServerErrorAC>\r\n\r\ntype serverErrorType = {\r\n    response: { data: dataServerErrorType }\r\n}\r\ntype dataServerErrorType = {\r\n    email: string\r\n    error: string\r\n    in: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {useFormik} from 'formik';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {\r\n    InitialStateType,\r\n    passwordRecoveryTC,\r\n    SaveServerErrorAC,\r\n    SaveServerResponseAC,\r\n} from '../../../../m2-bll/reducers/passwordRecoveryReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport style from './PasswordRecovery.module.css'\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validatePasswordRecoveryForm} from '../../../../m4-utils/validators/validators';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const {serverResponse, serverError} = useSelector<RootState, InitialStateType>(state => state.passwordRecover)\r\n    const status = useSelector<RootState,RequestStatusType>(state =>state.loader.status )\r\n    const dispatch = useDispatch()\r\n\r\n    const clearServerResponseAndError = () => {\r\n        dispatch(SaveServerResponseAC(\"\"))\r\n        dispatch(SaveServerErrorAC(\"\"))\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate : (values: { email: string }) => {\r\n            const errors: { email?: string } = {};\r\n            validatePasswordRecoveryForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={style.forgotStyle}>\r\n            <form onSubmit={formik.handleSubmit} className={style.formForgot}>\r\n                <div>Your Email:</div>\r\n                <Input placeholder={\"Email\"}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       type=\"email\"\r\n                       onFocus={clearServerResponseAndError}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Send\"}\r\n                            disabled={status === \"loading\" || !!serverError || !!serverResponse}/>\r\n                </div>\r\n            </form>\r\n            {status === \"loading\" ? <Loader/> : null}\r\n            {serverResponse || serverError}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {AuthResponseType} from '../../../../m3-dal/api';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {LogOut} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\n\r\nexport const Profile = () => {\r\n    const isAuth = useSelector<RootState, boolean>(state => state.login.isAuth)\r\n    const user = useSelector<RootState, AuthResponseType>(state => state.profile)\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.loader.status)\r\n    const dispatch = useDispatch()\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(LogOut())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>name : {user.name}</span>\r\n            </div>\r\n            <div>\r\n                <span>avatar : {user.avatar}</span>\r\n            </div>\r\n            <div>\r\n                <span>publicCardPacksCount : {user.publicCardPacksCount}</span>\r\n            </div>\r\n            {status === 'loading' ? <Loader/> :\r\n                <Button onClick={logoutHandler} name={'Logout'}/>}\r\n        </div>\r\n    )\r\n}","const initialState: initialStateGetRequestType = {\r\n    packName: \"\",\r\n    min: 0,\r\n    max: 100,\r\n    sortPacks: \"0updated\",\r\n    page: 1,\r\n    pageCount: 4,\r\n    checkedMyPacks: false,\r\n    cardPacksTotalCount: 1,\r\n    searchStatus: false\r\n}\r\n\r\n\r\nexport const dataForGetRequestReducer = (state = initialState, action: ActionType): initialStateGetRequestType => {\r\n    switch (action.type) {\r\n        case \"SET_PACK_NAME\": {\r\n            return {...state, packName: action.packName}\r\n        }\r\n        case \"SET_MIN\": {\r\n            return {...state, min: action.min}\r\n        }\r\n        case \"SET_MAX\": {\r\n            return {...state, max: action.max}\r\n        }\r\n        case \"SET_SORT_PACKS\": {\r\n            return {...state, sortPacks: action.sortPacks}\r\n        }\r\n        case \"SET_PAGE\": {\r\n            return {...state, page: action.page}\r\n        }\r\n        case \"SET_PAGE_COUNT\": {\r\n            return {...state, pageCount: action.pageCount}\r\n        }\r\n        case \"SET_CHECKED_MY_PACKS\": {\r\n            return {...state, checkedMyPacks: action.checked}\r\n        }\r\n        case \"SET_PACKS_TOTAL_COUNT\": {\r\n            return {...state, cardPacksTotalCount: action.TotalCount}\r\n        }\r\n        case \"SET_SEARCH_STATUS\": {\r\n            return {...state, searchStatus: action.searchStatus}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setPackNameAC = (packName: string) => ({type: 'SET_PACK_NAME', packName} as const)\r\nexport const setMinAC = (min: number) => ({type: 'SET_MIN', min} as const)\r\nexport const setMaxAC = (max: number) => ({type: 'SET_MAX', max} as const)\r\nexport const setSortPacksAC = (sortPacks: sortPacksType) => ({type: 'SET_SORT_PACKS', sortPacks} as const)\r\nexport const setPageAC = (page: number) => ({type: 'SET_PAGE', page} as const)\r\nexport const setPageCountAC = (pageCount: number) => ({type: 'SET_PAGE_COUNT', pageCount} as const)\r\nexport const setCheckedMyPacksAC = (checked: boolean) => ({type: 'SET_CHECKED_MY_PACKS', checked} as const)\r\nexport const setPacksTotalCountAC = (TotalCount: number) => ({type: 'SET_PACKS_TOTAL_COUNT', TotalCount} as const)\r\nexport const setSearchStatusAC = (searchStatus: boolean) => ({type: 'SET_SEARCH_STATUS', searchStatus} as const)\r\n\r\n// types\r\nexport type initialStateGetRequestType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: sortPacksType\r\n    page: number\r\n    pageCount: number\r\n    checkedMyPacks: boolean\r\n    cardPacksTotalCount: number\r\n    searchStatus: boolean\r\n}\r\nexport type sortPacksType = \"1updated\" | \"0updated\"\r\n\r\ntype ActionType = ReturnType<typeof setPackNameAC>\r\n    | ReturnType<typeof setMinAC>\r\n    | ReturnType<typeof setMaxAC>\r\n    | ReturnType<typeof setSortPacksAC>\r\n    | ReturnType<typeof setPageAC>\r\n    | ReturnType<typeof setPageCountAC>\r\n    | ReturnType<typeof setCheckedMyPacksAC>\r\n    | ReturnType<typeof setPacksTotalCountAC>\r\n    | ReturnType<typeof setSearchStatusAC>\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {packsAPI} from '../../m3-dal/api';\r\nimport {setPacksTotalCountAC, setPageAC, sortPacksType} from './dataForGetRequestReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    cardPacks: [{\r\n        _id: null,\r\n        user_id: null,\r\n        user_name: null,\r\n        private: null,\r\n        name: null,\r\n        path: null,\r\n        grade: null,\r\n        shots: null,\r\n        cardsCount: null,\r\n        type: null,\r\n        rating: null,\r\n        created: null,\r\n        updated: null,\r\n        more_id: null,\r\n        __v: null,\r\n        deckCover: null\r\n    },\r\n    ],\r\n    page: 0,\r\n    pageCount: 0,\r\n    cardPacksTotalCount: 0,\r\n    minCardsCount: null,\r\n    maxCardsCount: null,\r\n    token: null,\r\n    tokenDeathTime: null,\r\n}\r\n\r\n\r\nexport const packsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, ...action.packs}\r\n        case \"ADD_PACK\":\r\n            return {...state, cardPacks: [action.pack, ...state.cardPacks]}\r\n        case \"DELETE_PACK\":\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter(card => card._id !== action.id)\r\n            }\r\n        case \"UPDATE_PACK\":\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.map((card) => card._id === action.id ? {...card, name: action.name} : card)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPacks = (packs: InitialStateType) => ({type: 'SET_PACKS', packs} as const)\r\nexport const addingPackAC = (pack: cardPack) => ({type: 'ADD_PACK', pack} as const)\r\nexport const deletePackAC = (id: string | null) => ({type: 'DELETE_PACK', id} as const)\r\nexport const updatePackAC = (id: string | null, name: string) => ({type: 'UPDATE_PACK', id, name} as const)\r\n\r\n//thunks\r\nexport const getPacksAndMyPacksTC = (userID?: string, pageCount?: number, page?: number) => (dispatch: Dispatch) => {\r\n    packsAPI.getPacksAndMyPacks(userID, pageCount, page)\r\n        .then(res => {\r\n            dispatch(setPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n            dispatch(setPageAC(res.data.page))\r\n            dispatch(setPacks(res.data))\r\n        })\r\n        .catch((err) => {\r\n            alert(err)\r\n        })\r\n}\r\n\r\nexport const getPacksAndMyPacksWithSearchTC = (userID?: string, packName?: string, min?: number, max?: number, pageCount?: number, page?: number, sortPacks?: sortPacksType) => (dispatch: Dispatch) => {\r\n    packsAPI.getPacksAndMyPacksWithSearch(userID, packName, min, max, pageCount, page, sortPacks)\r\n        .then((res) => {\r\n            debugger\r\n            dispatch(setPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n            dispatch(setPageAC(res.data.page))\r\n            dispatch(setPacks(res.data))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const addingPackTC = () => (dispatch: Dispatch) => {\r\n    packsAPI.addPack()\r\n        .then((res: resType) => {\r\n            dispatch(addingPackAC(res.data.newCardsPack))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (id: string | null) => (dispatch: Dispatch) => {\r\n    packsAPI.deletePack(id)\r\n        .then((res) => {\r\n            dispatch(deletePackAC(id))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (id: string | null, name: string) => (dispatch: Dispatch) => {\r\n    packsAPI.updatePack(id, name)\r\n        .then((res) => {\r\n            dispatch(updatePackAC(id, name))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    cardPacks: Array<cardPack>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    minCardsCount: number | null\r\n    maxCardsCount: number | null\r\n    token: string | null\r\n    tokenDeathTime: number | null\r\n}\r\nexport type cardPack = {\r\n    _id: string | null\r\n    user_id: string | null\r\n    user_name: string | null\r\n    private: boolean | null\r\n    name: string | null\r\n    path: string | null\r\n    grade: number | null\r\n    shots: number | null\r\n    cardsCount: number | null\r\n    type: string | null\r\n    rating: number | null\r\n    created: string | null\r\n    updated: string | null\r\n    more_id: string | null\r\n    __v: number | null\r\n    deckCover: null\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof setPacks>\r\n    | ReturnType<typeof addingPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof deletePackAC>\r\n\r\ntype resType = {\r\n    data: newCardsPackType\r\n}\r\ntype newCardsPackType = {\r\n    newCardsPack: cardPack\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Styles from './Table.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {\r\n    addingPackTC,\r\n    cardPack,\r\n    deletePackTC,\r\n    updatePackTC,\r\n    getPacksAndMyPacksWithSearchTC\r\n} from '../../../m2-bll/reducers/packsReducer';\r\nimport {initialStateGetRequestType, setSortPacksAC} from \"../../../m2-bll/reducers/dataForGetRequestReducer\";\r\n\r\n\r\nexport const Table = React.memo(() => {\r\n\r\n    console.log(\"Table rendering\")\r\n\r\n    const newName = \"new checked name\"\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    const {page, pageCount, checkedMyPacks, packName, min, max} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const packs = useSelector<RootState, Array<cardPack>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onClickAddPack = () => {\r\n        dispatch(addingPackTC())\r\n    }\r\n\r\n    const onClickDeletePack = (id: string | null) => {\r\n        dispatch(deletePackTC(id))\r\n    }\r\n\r\n    const onClickUpdatePack = (id: string | null, newName: string) => {\r\n        dispatch(updatePackTC(id, newName))\r\n    }\r\n\r\n    const onClickDescendingSort = () => {\r\n        dispatch(setSortPacksAC(\"0updated\"))\r\n        if (checkedMyPacks) {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(userID, packName, min, max, pageCount, page, \"0updated\"))\r\n        } else {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(\"\", packName, min, max, pageCount, page, \"0updated\"))\r\n        }\r\n\r\n    }\r\n\r\n    const onClickAscendingSort = () => {\r\n        dispatch(setSortPacksAC(\"1updated\"))\r\n        if (checkedMyPacks) {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(userID, packName, min, max, pageCount, page, \"1updated\"))\r\n        } else {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(\"\", packName, min, max, pageCount, page, \"1updated\"))\r\n        }\r\n\r\n    }\r\n\r\n    const renderRows = () => packs.map(row =>\r\n        <tr key={row._id}>\r\n            <td>{row.name}</td>\r\n            <td>{row.cardsCount}</td>\r\n            <td>{row.updated}</td>\r\n            <td>''</td>\r\n            <td>\r\n                <button onClick={() => onClickDeletePack(row._id)}>delete</button>\r\n            </td>\r\n            <td>\r\n                <button onClick={() => onClickUpdatePack(row._id, newName)}>update</button>\r\n            </td>\r\n            <td><Link to={'#'}>cards</Link></td>\r\n        </tr>\r\n    )\r\n    return (\r\n        <table className={Styles.table}>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>\r\n                    CardsCount\r\n                    <button className={Styles.arrow} onClick={onClickAscendingSort}>/\\</button>\r\n                    <button className={Styles.arrow} onClick={onClickDescendingSort}>\\/</button>\r\n                </th>\r\n                <th>Update</th>\r\n                <th>Url</th>\r\n                <th>\r\n                    <button onClick={onClickAddPack}>Add</button>\r\n                </th>\r\n                <th></th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {renderRows()}\r\n            </tbody>\r\n        </table>\r\n    );\r\n})","import React from \"react\";\r\nimport {Slider} from \"@material-ui/core\";\r\nimport style from \"./CommonSlider.module.css\"\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        color: \"black\",\r\n    }\r\n});\r\n\r\ntype Slider2Type = {\r\n    value: number[]\r\n    setValue:(newValue:number[]) => void\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport const CommonSlider = React.memo((props: Slider2Type) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        props.setValue(newValue as number[]);\r\n    };\r\n\r\n    return <div className={style.container}>\r\n        <div className={style.value}>\r\n            <span>{props.value[0]}</span>\r\n            <span>{props.value[1]}</span>\r\n        </div>\r\n        <Slider\r\n            className={classes.root}\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.value}\r\n            onChange={handleChange}\r\n            valueLabelDisplay=\"auto\"\r\n            aria-labelledby=\"range-slider\"\r\n        />\r\n    </div>\r\n})","import React, {ChangeEvent} from 'react';\r\nimport style from './Paginator.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../../m2-bll/store';\r\nimport {\r\n    getPacksAndMyPacksWithSearchTC,\r\n    getPacksAndMyPacksTC,\r\n} from '../../../../../m2-bll/reducers/packsReducer';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport {\r\n    initialStateGetRequestType,\r\n    setPageAC,\r\n    setPageCountAC\r\n} from \"../../../../../m2-bll/reducers/dataForGetRequestReducer\";\r\n\r\nexport const Paginator = () => {\r\n\r\n    const {page, pageCount, cardPacksTotalCount, checkedMyPacks, packName, min, max, searchStatus} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    const dispatch = useDispatch()\r\n\r\n    const HowManyCounts = Math.ceil(cardPacksTotalCount / pageCount)\r\n\r\n    //\r\n    const changeSelect = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(setPageCountAC(+e.currentTarget.value))\r\n        if (checkedMyPacks) {\r\n            if (searchStatus) {\r\n                dispatch(getPacksAndMyPacksWithSearchTC(userID, packName, min, max, +e.currentTarget.value, page))\r\n            } else {\r\n                dispatch(getPacksAndMyPacksTC(userID, +e.currentTarget.value, page))\r\n            }\r\n        } else {\r\n            if (searchStatus) {\r\n                dispatch(getPacksAndMyPacksWithSearchTC(\"\",packName, min, max, +e.currentTarget.value, page))\r\n            } else {\r\n                dispatch(getPacksAndMyPacksTC(\"\",+e.currentTarget.value, page))\r\n            }\r\n        }\r\n    }\r\n\r\n    const ChangePaginator = (event: ChangeEvent<unknown>, page: number) => {\r\n        dispatch(setPageAC(page))\r\n        if (checkedMyPacks) {\r\n            if (searchStatus) {\r\n                dispatch(getPacksAndMyPacksWithSearchTC(userID, packName, min, max, pageCount, page))\r\n            } else {\r\n                dispatch(getPacksAndMyPacksTC(userID, pageCount, page))\r\n            }\r\n        } else {\r\n            if (searchStatus) {\r\n                dispatch(getPacksAndMyPacksWithSearchTC(\"\", packName, min, max, pageCount, page))\r\n            } else {\r\n                dispatch(getPacksAndMyPacksTC(\"\",pageCount, page))\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={changeSelect}>\r\n                <option value={4}>4</option>\r\n                <option value={5}>5</option>\r\n                <option value={10}>10</option>\r\n                <option value={20}>20</option>\r\n                <option value={30}>30</option>\r\n            </select>\r\n            <div className={style.containerPages}>\r\n                <Pagination count={HowManyCounts} color=\"secondary\" page={page} onChange={ChangePaginator}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Table} from \"../../../common/Table/Table\";\r\nimport {CommonSlider} from \"../../../common/CommonSlider/CommonSlider\";\r\nimport {useFormik} from \"formik\";\r\nimport {Input} from \"../../../common/Input/Input\";\r\nimport {Button} from \"../../../common/Button/Button\";\r\nimport style from \"./Packs.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getPacksAndMyPacksWithSearchTC,\r\n    getPacksAndMyPacksTC,\r\n} from \"../../../../m2-bll/reducers/packsReducer\";\r\nimport {Checkbox} from '@material-ui/core';\r\nimport {RootState} from \"../../../../m2-bll/store\";\r\nimport {Paginator} from './Paginator/Paginator';\r\nimport {\r\n    initialStateGetRequestType,\r\n    setCheckedMyPacksAC, setMaxAC, setMinAC, setPackNameAC, setSearchStatusAC,\r\n} from \"../../../../m2-bll/reducers/dataForGetRequestReducer\";\r\n\r\nexport const Packs = () => {\r\n\r\n    console.log(\"Packs rendering\")\r\n\r\n    const {pageCount, checkedMyPacks, packName, min, max} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksAndMyPacksTC())\r\n    }, [dispatch])\r\n\r\n    const [value, setValue] = useState([0, 100])\r\n\r\n    const ChangeCheckbox = () => {\r\n        if (!checkedMyPacks) {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(userID, packName, min, max, pageCount))\r\n            dispatch(setCheckedMyPacksAC(true))\r\n        } else {\r\n            dispatch(getPacksAndMyPacksWithSearchTC(\"\", packName, min, max, pageCount))\r\n            dispatch(setCheckedMyPacksAC(false))\r\n        }\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            search: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setSearchStatusAC(true))\r\n            if (checkedMyPacks) {\r\n                dispatch(setPackNameAC(values.search))\r\n                dispatch(setMinAC(value[0]))\r\n                dispatch(setMaxAC(value[1]))\r\n                dispatch(getPacksAndMyPacksWithSearchTC(userID, values.search, value[0], value[1], pageCount))\r\n            } else {\r\n                dispatch(setPackNameAC(values.search))\r\n                dispatch(setMinAC(value[0]))\r\n                dispatch(setMaxAC(value[1]))\r\n                dispatch(getPacksAndMyPacksWithSearchTC(\"\", values.search, value[0], value[1], pageCount))\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit} className={style.formStyle}>\r\n                <Input placeholder={\"Search\"}\r\n                       id=\"search\"\r\n                       name=\"search\"\r\n                       type=\"text\"\r\n                       {...formik.getFieldProps('search')}\r\n                />\r\n                <CommonSlider value={value}\r\n                              setValue={setValue}\r\n                              min={0}\r\n                              max={100}/>\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Search\"}/>\r\n                </div>\r\n            </form>\r\n            <div><Checkbox checked={checkedMyPacks} onChange={ChangeCheckbox}/>My cards</div>\r\n            <h1>Packs</h1>\r\n            <Table/>\r\n            <Paginator/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport Styles from \"../../../common/Table/Table.module.css\";\r\n\r\nconst card = [\r\n    {\r\n        id: 222,\r\n        Question: 1,\r\n        Answer: 2,\r\n        Grade: 3,\r\n        Update: 4,\r\n        Url: 5\r\n    },\r\n    {\r\n        id: 333,\r\n        Question: 6,\r\n        Answer: 7,\r\n        Grade: 8,\r\n        Update: 9,\r\n        Url: 10\r\n    },\r\n]\r\n\r\nexport const Cards = () => {\r\n\r\n    const renderRows = () => card.map(row =>\r\n        <tr key={row.id}>\r\n            <td>{row.Question}</td>\r\n            <td>{row.Answer}</td>\r\n            <td>{row.Grade}</td>\r\n            <td>{row.Update}</td>\r\n            <td>{row.Url}</td>\r\n            <td>\r\n                <button>delete</button>\r\n            </td>\r\n            <td>\r\n                <button>update</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <table className={Styles.table}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>Grade</th>\r\n                    <th>Update</th>\r\n                    <th>Url</th>\r\n                    <th>\r\n                        <button>Add</button>\r\n                    </th>\r\n                    <th></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {renderRows()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {cards, login, newPassword, packs, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/p1-login/Login';\r\nimport {Register} from '../Main/Pages/p2-register/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/p3-passwordRecovery/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/p4-newPassword/NewPassword';\r\nimport {Profile} from '../Main/Pages/p5-profile/Profile';\r\nimport {Packs} from \"../Main/Pages/p6-packs/Packs\";\r\nimport {Cards} from \"../Main/Pages/p7-cards/Cards\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={() => <Login/>}/>\r\n            <Route path={register} render={() => <Register/>}/>\r\n            <Route path={passwordRecovery} render={() => <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={() => <NewPassword/>}/>\r\n            <Route path={profile} render={() => <Profile/>}/>\r\n            <Route path={packs} render={() => <Packs/>}/>\r\n            <Route path={cards} render={() => <Cards/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Main} from './Main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\nimport {authMe} from '../m2-bll/reducers/loginReducer';\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecoveryReducer';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\nimport {loaderReducer} from './reducers/loaderReducer';\r\nimport {packsReducer} from './reducers/packsReducer';\r\nimport {dataForGetRequestReducer} from \"./reducers/dataForGetRequestReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    loader: loaderReducer,\r\n    packs: packsReducer,\r\n    dataGetRequest: dataForGetRequestReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './n1-main/m2-bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"Register_containerForm__1Kq0a\",\"form\":\"Register_form__25AA_\",\"error\":\"Register_error__2dbQl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__f6MDx\",\"arrow\":\"Table_arrow__2me32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Login_formContainer__3_NXu\",\"error\":\"Login_error__THgw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotStyle\":\"PasswordRecovery_forgotStyle__3lTSc\",\"formForgot\":\"PasswordRecovery_formForgot__ilIRX\",\"error\":\"PasswordRecovery_error__2V3Md\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__12FHA\",\"active\":\"NavlinkCommon_active__1gixo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CommonSlider_container__1Ui1w\",\"value\":\"CommonSlider_value__39RFR\",\"root\":\"CommonSlider_root__kTADk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__uN6UX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__2FOB6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2pbGZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__8vJuB\",\"active\":\"Button_active__1w_te\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Loader_ldsRing__1VNoL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"Packs_formStyle__3iJOG\"};"],"sourceRoot":""}