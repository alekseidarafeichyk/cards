{"version":3,"sources":["n1-main/m1-ui/Main/Pages/Register.module.css","n1-main/m1-ui/Main/Pages/PasswordRecovery.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/Main/Pages/Login.module.css","n1-main/m1-ui/common/Loader/Loader.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m1-ui/Main/Pages/Login.tsx","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m1-ui/common/Loader/Loader.tsx","n1-main/m1-ui/Main/Pages/Register.tsx","n1-main/m2-bll/reducers/passwordRecoveryReducer.ts","n1-main/m1-ui/Main/Pages/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/NewPassword.tsx","n1-main/m1-ui/Main/Pages/Profile.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Input","React","memo","name","id","rest","input","Button","button","instance","axios","create","withCredentials","baseURL","forgotAPI","dataInForgot","post","authApi","authUserData","InitialState","isAuth","Login","dispatch","useDispatch","useSelector","state","login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","response","type","catch","err","error","data","message","console","log","formContainer","handleSubmit","placeholder","getFieldProps","isRegistered","serverError","status","RegisterUserAC","SetStatusAC","RegisterUserTC","registrationAPI","res","Loader","ldsRing","Register","register","repeatPassword","length","errorElement","containerForm","form","serverResponse","SaveServerResponseAC","answer","SaveServerErrorAC","setStatusAC","PasswordRecovery","passwordRecover","from","info","passwordRecoveryTC","forgotStyle","formForgot","onFocus","disabled","NewPassword","Profile","Routes","routes","path","render","Main","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","newPassword","profile","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7863d0b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"Register_containerForm__374RV\",\"form\":\"Register_form__1tDJh\",\"error\":\"Register_error__2ss3E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotStyle\":\"PasswordRecovery_forgotStyle__3qR_w\",\"formForgot\":\"PasswordRecovery_formForgot__KPRD_\",\"error\":\"PasswordRecovery_error__1P396\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__21JlT\",\"active\":\"NavlinkCommon_active__2J4uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kZgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__1ggEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1GLt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P0gp\",\"buton\":\"Button_buton__1g8Pz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Login_formContainer__3Fd2Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Loader_ldsRing__37cMZ\"};","import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {login, newPassword, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType =\r\n    React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & {\r\n    name?: string,\r\n    id?: string\r\n};\r\n\r\nexport const Input : FC<InputPropsType> = React.memo (({name,id,...rest}) => {\r\n    return <input className={style.input} {...rest} id={id} ></input>\r\n})","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button: FC<ButtonPropsType> = React.memo(({name, ...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n})","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\n\r\nexport const forgotAPI = {\r\n    forgot(dataInForgot: dataInForgotType) {\r\n        return instance.post<ResponseType>('/auth/forgot', dataInForgot)\r\n    }\r\n}\r\n\r\nexport type dataInForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport const registrationAPI = (email: string, password: string) => {\r\n    return instance.post('/auth/register', {email, password});\r\n}\r\n\r\nexport const authApi = {\r\n    me() {\r\n        return instance.post<AuthResponseType>('/auth/me', {})\r\n    },\r\n\r\n    login(authUserData: AuthUserData) {\r\n        return instance.post<AuthResponseType>('/auth/login', {...authUserData})\r\n    }\r\n}\r\n\r\n// Types\r\n\r\ntype AuthResponseType = {\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    rememberMe: boolean\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    __v: number,\r\n    _id: string,\r\n    success: boolean\r\n}\r\n\r\nexport type AuthUserData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import {authApi, AuthUserData} from \"../../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst InitialState = {\r\n    isAuth: false\r\n}\r\n\r\ntype initialStateType = typeof InitialState\r\n\r\nexport const loginReducer = (state: initialStateType = InitialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET_IS_AUTH':\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        default : return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nconst setIsAuth = (isAuth: boolean)=> ({type: 'LOGIN/SET_IS_AUTH', isAuth} as const)\r\n\r\n// Thunks\r\n\r\nexport const LogIn = (authUserData: AuthUserData) => (dispatch: Dispatch<ActionsTypes>) => {\r\n        authApi.login({...authUserData}).then(response => {\r\n            dispatch(setIsAuth(true))\r\n        }).catch(err => {\r\n            let error = err.response ? err.response.data.error : err.message\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authApi.me().then(response => response).catch(err => {\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n}\r\n\r\n// Types\r\ntype ActionsTypes =  ReturnType<typeof setIsAuth>\r\n\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {Input} from \"../../common/Input/Input\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LogIn} from \"../../../m2-bll/reducers/loginReducer\";\r\nimport {RootState} from \"../../../m2-bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from './Login.module.css'\r\n\r\n\r\ntype AuthData = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const isAuth = useSelector((state: RootState) => state.login.isAuth)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            if (!values.email) {\r\n                errors.email = 'Field is required';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Field is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LogIn({...values}))\r\n\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.formContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input\r\n                    id={'email'}\r\n                    type={'text'}\r\n                    placeholder={'Enter your email'}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                <Input\r\n                    id={'password'}\r\n                    placeholder={'password'}\r\n                    type={'password'}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                remember me <input\r\n                type={'checkbox'}\r\n                {...formik.getFieldProps('rememberMe')}\r\n            />\r\n                {formik.errors.email ? <div>{formik.errors.password}</div> : null}\r\n                <Button type=\"submit\" name=\"Sign In\"></Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../m3-dal/api';\r\n\r\nconst InitialState : InitialStateType = {\r\n    isRegistered: false,\r\n    serverError: '',\r\n    status: 'idle'\r\n}\r\n\r\nexport const registerReducer = (state = InitialState, action: ActionsType) : InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER_USER': {\r\n            return {\r\n                ...state,\r\n                isRegistered : action.isRegistered,\r\n                serverError: action.error ? action.error : ''\r\n            }\r\n        }\r\n        case 'SET_STATUS': {\r\n            return {...state,status : action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const RegisterUserAC = (isRegistered : boolean, error= '') =>\r\n    ({type: 'REGISTER_USER',isRegistered,error} as const);\r\nexport const SetStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'SET_STATUS',status} as const);\r\n\r\n//thunks\r\nexport const RegisterUserTC = (email: string,password: string) => (dispatch: Dispatch) => {\r\n            dispatch(SetStatusAC('loading'));\r\n    registrationAPI(email, password)\r\n        .then(res => {\r\n            dispatch(SetStatusAC('succeeded'));\r\n            dispatch(RegisterUserAC(true));\r\n        })\r\n        .catch(error => {\r\n            dispatch(SetStatusAC('failed'));\r\n            dispatch(RegisterUserAC(false,error.response.data.error));\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    isRegistered: boolean,\r\n    serverError: string,\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof RegisterUserAC>\r\n    | ReturnType<typeof SetStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return <div className={style.ldsRing}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {Input} from '../../common/Input/Input';\r\nimport {Button} from '../../common/Button/Button';\r\nimport style from './Register.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {InitialStateType, RegisterUserTC} from '../../../m2-bll/reducers/registerReducer';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../routes/RoutePass';\r\nimport {Loader} from '../../common/Loader/Loader';\r\n\r\n type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistered, serverError, status} = useSelector<RootState, InitialStateType>(state => state.register)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 5 characters or more';\r\n            }\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 5 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterUserTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const errorElement = serverError ? <div className={style.error}>{serverError}</div> : null\r\n    return (\r\n        <div className={style.containerForm}>\r\n            <form className={style.form} onSubmit={formik.handleSubmit}>\r\n                <Input type={'text'}\r\n                       id={'email'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'password'}\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'repeatPassword'}\r\n                       placeholder={'Repeat password'}\r\n                       {...formik.getFieldProps('repeatPassword')}\r\n                />\r\n                {formik.errors.repeatPassword ? <div className={style.error}>{formik.errors.repeatPassword}</div> : null}\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name={'Register'}/>\r\n                }\r\n            </form>\r\n            {errorElement}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {dataInForgotType, forgotAPI} from \"../../m3-dal/api\";\r\n\r\nconst InitialState: InitialStateType = {\r\n    email: \"\",\r\n    serverResponse: \"\",\r\n    serverError: \"\",\r\n    status: \"idle\"\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = InitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"EMAIL_TO_CHANGE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        case \"SAVE_SERVER_RESPONSE\":\r\n            return {\r\n                ...state,\r\n                serverResponse: action.answer\r\n            }\r\n        case \"SAVE_SERVER_ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setEmailToChangePasswordAC = (email: string) => ({type: 'EMAIL_TO_CHANGE_PASSWORD', email} as const)\r\nexport const SaveServerResponseAC = (answer: string) => ({type: 'SAVE_SERVER_RESPONSE', answer} as const)\r\nexport const SaveServerErrorAC = (error: string) => ({type: 'SAVE_SERVER_ERROR', error} as const)\r\nexport const setStatusAC = (status: RequestStatusType) => ({type: 'SET_STATUS', status} as const)\r\n\r\nexport const passwordRecoveryTC = (dataInForgot: dataInForgotType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC(\"loading\"))\r\n    forgotAPI.forgot(dataInForgot)\r\n        .then((res) => {\r\n            dispatch(setEmailToChangePasswordAC(dataInForgot.email))\r\n            dispatch(SaveServerResponseAC(res.data.info))\r\n            dispatch(setStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((err: serverErrorType) => {\r\n            dispatch(SaveServerErrorAC(err.response.data.error))\r\n            dispatch(setStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = {\r\n    email: string\r\n    serverResponse: string\r\n    serverError: string\r\n    status: RequestStatusType\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setEmailToChangePasswordAC>\r\n    | ReturnType<typeof SaveServerResponseAC>\r\n    | ReturnType<typeof SaveServerErrorAC>\r\n    | ReturnType<typeof setStatusAC>\r\n\r\ntype serverErrorType = {\r\n    response: { data: dataServerErrorType }\r\n}\r\ntype dataServerErrorType = {\r\n    email: string\r\n    error: string\r\n    in: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport {Input} from \"../../common/Input/Input\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {\r\n    InitialStateType,\r\n    passwordRecoveryTC,\r\n    SaveServerErrorAC,\r\n    SaveServerResponseAC,\r\n} from \"../../../m2-bll/reducers/passwordRecoveryReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../m2-bll/store\";\r\nimport {dataInForgotType} from \"../../../m3-dal/api\";\r\nimport style from \"./PasswordRecovery.module.css\"\r\nimport {Loader} from \"../../common/Loader/Loader\";\r\n\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const {serverResponse, serverError, status} = useSelector<RootState, InitialStateType>(state => state.passwordRecover)\r\n    const dispatch = useDispatch()\r\n\r\n    const clearServerResponseAndError = () => {\r\n        dispatch(SaveServerResponseAC(\"\"))\r\n        dispatch(SaveServerErrorAC(\"\"))\r\n    }\r\n\r\n    const onSubmit = (values: { email: string }) => {\r\n        const dataInForgot: dataInForgotType = {\r\n            email: values.email,\r\n            from: \"test-front-admin\",\r\n            message: `<div style=\"background-color: gold; padding: 15px\">Password recover link:\r\n                    <a href=\"https://alekseidarafeichyk.github.io/cards/#/new_password/$token$\">link</a>\r\n                </div>`\r\n        }\r\n        dispatch(passwordRecoveryTC(dataInForgot))\r\n    }\r\n\r\n    const validate = (values: { email: string }) => {\r\n        const errors: { email?: string } = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate,\r\n        onSubmit,\r\n    });\r\n\r\n    return (\r\n        <div className={style.forgotStyle}>\r\n            <form onSubmit={formik.handleSubmit} className={style.formForgot}>\r\n                <div>Your Email:</div>\r\n                <Input placeholder={\"Email\"}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       type=\"email\"\r\n                       onFocus={clearServerResponseAndError}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Send\"}\r\n                            disabled={status === \"loading\" || !!serverError || !!serverResponse}/>\r\n                </div>\r\n            </form>\r\n            {status === \"loading\" ? <Loader/> : null}\r\n            {serverResponse || serverError}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\n\r\nexport const Profile = () => {\r\n    return <div>Profile</div>\r\n}","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {login, newPassword, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/Login';\r\nimport {Register} from '../Main/Pages/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/NewPassword';\r\nimport { Profile } from '../Main/Pages/Profile';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={()=> <Login/>}/>\r\n            <Route path={register} render={()=> <Register/>}/>\r\n            <Route path={passwordRecovery} render={()=> <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={()=> <NewPassword/>}/>\r\n            <Route path={profile} render={()=> <Profile/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Main} from './Main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const profileReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecoveryReducer';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './n1-main/m2-bll/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App/>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}