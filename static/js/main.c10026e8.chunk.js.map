{"version":3,"sources":["n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/reducers/loaderReducer.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m1-ui/common/Loader/Loader.tsx","n1-main/m1-ui/Main/Pages/p1-login/Login.tsx","n1-main/m4-utils/validators/validators.ts","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m1-ui/Main/Pages/p2-register/Register.tsx","n1-main/m2-bll/reducers/passwordRecoveryReducer.ts","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/p4-newPassword/NewPassword.tsx","n1-main/m1-ui/Main/Pages/p5-profile/Profile.tsx","n1-main/m2-bll/reducers/packsReducer.ts","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/CommonSlider/CommonSlider.tsx","n1-main/m1-ui/Main/Pages/p6-packs/Packs.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/Main/Pages/p2-register/Register.module.css","n1-main/m1-ui/Main/Pages/p1-login/Login.module.css","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.module.css","n1-main/m1-ui/common/Table/Table.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/common/CommonSlider/CommonSlider.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Loader/Loader.module.css","n1-main/m1-ui/Main/Pages/p6-packs/Packs.module.css"],"names":["NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Input","React","memo","name","id","rest","input","Button","button","instance","axios","create","withCredentials","baseURL","authAPI","post","authUserData","delete","registrationAPI","email","password","forgotAPI","from","message","packsAPI","pageCount","sortPacks","get","InitialState","_id","rememberMe","isAdmin","verified","publicCardPacksCount","created","updated","__v","token","tokenDeathTime","avatar","setDeleteUserProfile","user","type","status","SetStatusAC","isAuth","setIsAuth","Loader","ldsRing","Login","dispatch","useDispatch","useSelector","state","login","loader","formik","useFormik","initialValues","validate","values","errors","test","length","validateLoginForm","onSubmit","then","response","data","catch","err","error","console","log","formContainer","handleSubmit","placeholder","getFieldProps","isRegistered","serverError","RegisterUserAC","Register","register","repeatPassword","validateRegisterForm","res","useEffect","errorElement","containerForm","form","serverResponse","SaveServerResponseAC","answer","SaveServerErrorAC","PasswordRecovery","passwordRecover","validatePasswordRecoveryForm","setEmailToChangePasswordAC","info","forgotStyle","formForgot","onFocus","disabled","NewPassword","Profile","profile","onClick","cardPacks","user_id","user_name","private","path","grade","shots","cardsCount","rating","more_id","deckCover","page","cardPacksTotalCount","minCardsCount","maxCardsCount","Table","packs","Styles","table","arrow","map","row","key","useStyles","makeStyles","root","width","color","CommonSlider","classes","container","value","Slider","min","max","onChange","event","newValue","setValue","valueLabelDisplay","aria-labelledby","Packs","useState","search","alert","formStyle","Routes","routes","render","Main","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","newPassword","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c10026e8.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {login, newPassword, packs, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n            <NavLinkCommon to={packs} linkName={'Packs'}/>\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';\r\nexport const packs: string = '/packs';","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType =\r\n    React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & {\r\n    name?: string,\r\n    id?: string\r\n};\r\n\r\nexport const Input : FC<InputPropsType> = React.memo (({name,id,...rest}) => {\r\n    return <input className={style.input} {...rest} id={id} ></input>\r\n})","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button: FC<ButtonPropsType> = React.memo(({name, ...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n})","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<AuthResponseType>('/auth/me', {})\r\n    },\r\n    login(authUserData: AuthUserData) {\r\n        return instance.post<AuthResponseType>('/auth/login', {...authUserData})\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/me')\r\n    },\r\n}\r\n\r\nexport const registrationAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password});\r\n    }\r\n}\r\n\r\nexport const forgotAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<ResponseType>('/auth/forgot', {\r\n            email: email,\r\n            from: 'test-front-admin',\r\n            message: `<div style=\"background-color: gold; padding: 15px\">Password recover link:\r\n                    <a href=\"https://alekseidarafeichyk.github.io/cards/#/new_password/$token$\">link</a>\r\n                </div>`\r\n        })\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(pageCount = 1000, page = 4, sortPacks = '0updated') {\r\n        return instance.get(`/cards/pack?pageCount=${pageCount}&page=${4}&sortPacks=${sortPacks}`)\r\n    }\r\n}\r\n\r\n\r\n// Types\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    __v: number,\r\n    token: string,\r\n    tokenDeathTime: number\r\n    avatar?: string\r\n}\r\nexport type AuthUserData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n}","import {AuthResponseType} from '../../m3-dal/api';\r\n\r\nconst InitialState : AuthResponseType = {\r\n    _id:'',\r\n    email:'',\r\n    rememberMe:false,\r\n    isAdmin:false,\r\n    name:'',\r\n    verified:false,\r\n    publicCardPacksCount:0,\r\n    created:'',\r\n    updated:'',\r\n    __v:0,\r\n    token:'',\r\n    tokenDeathTime: 0,\r\n    avatar: 'Some avatar'\r\n}\r\n\r\nexport const profileReducer = (state = InitialState, action: ActionsType): AuthResponseType => {\r\n    switch (action.type) {\r\n        case 'SET-DELETE-USER': {\r\n            return {...state, ...action.user}\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setDeleteUserProfile = (user: AuthResponseType) =>({type: 'SET-DELETE-USER', user} as const)\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setDeleteUserProfile>","import {RequestStatusType} from './registerReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    status: 'idle'\r\n}\r\n\r\n\r\nexport const loaderReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const SetStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'SET_STATUS', status} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof SetStatusAC>\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n}","import {authAPI, AuthUserData} from '../../m3-dal/api';\r\nimport {Dispatch} from 'redux';\r\nimport {setDeleteUserProfile} from './profileReducer';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState = {\r\n    isAuth: false,\r\n    status: 'idle'\r\n}\r\n\r\ntype initialStateType = typeof InitialState\r\n\r\nexport const loginReducer = (state: initialStateType = InitialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET_IS_AUTH':\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\nconst setIsAuth = (isAuth: boolean) => ({type: 'LOGIN/SET_IS_AUTH', isAuth} as const)\r\n\r\n// Thunks\r\nexport const LogIn = (authUserData: AuthUserData) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.login({...authUserData})\r\n        .then(response => {\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n}\r\nexport const LogOut = () => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            const defaultUserProfile = {\r\n                _id: '',\r\n                email: '',\r\n                rememberMe: false,\r\n                isAdmin: false,\r\n                name: '',\r\n                verified: false,\r\n                publicCardPacksCount: 0,\r\n                created: '',\r\n                updated: '',\r\n                __v: 0,\r\n                token: '',\r\n                tokenDeathTime: 0,\r\n                avatar: 'Some avatar'\r\n            }\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(defaultUserProfile))\r\n            dispatch(setIsAuth(false))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        })\r\n        .catch(err => {\r\n            let error = err.response ? err.response.data.error : err.message\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n// Types\r\ntype ActionsTypes =\r\n    | ReturnType<typeof setIsAuth>\r\n    | ReturnType<typeof setDeleteUserProfile>\r\n    | ReturnType<typeof SetStatusAC>\r\n","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return <div className={style.ldsRing}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogIn} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from './Login.module.css'\r\nimport {profile} from '../../../routes/RoutePass';\r\nimport {validateLoginForm} from '../../../../m4-utils/validators/validators';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport type AuthData = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector((state: RootState) => state.login.isAuth)\r\nconst status = useSelector<RootState,RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateLoginForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LogIn({...values}))\r\n\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={profile}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.formContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input\r\n                    id={'email'}\r\n                    type={'text'}\r\n                    placeholder={'Enter your email'}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input\r\n                    id={'password'}\r\n                    placeholder={'password'}\r\n                    type={'password'}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                remember me <input\r\n                type={'checkbox'}\r\n                {...formik.getFieldProps('rememberMe')}\r\n            />\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name=\"Sign In\"/>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {RegisterErrorType} from '../../m1-ui/Main/Pages/p2-register/Register';\r\nimport {AuthData} from '../../m1-ui/Main/Pages/p1-login/Login';\r\n\r\ntype valuesRegisterForm = {\r\n    email : string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const validateRegisterForm = (values: valuesRegisterForm, errors:RegisterErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n   if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n\r\n    if (!values?.repeatPassword) {\r\n        errors.repeatPassword = 'Field is required';\r\n    } else if (values.repeatPassword.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validateLoginForm = (values:valuesRegisterForm,errors: AuthData) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validatePasswordRecoveryForm = (values:valuesRegisterForm,errors: {email?: string}) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../m3-dal/api';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    isRegistered: false,\r\n    serverError: '',\r\n    status: 'idle'\r\n}\r\n\r\nexport const registerReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER_USER': {\r\n            return {\r\n                ...state,\r\n                isRegistered: action.isRegistered,\r\n                serverError: action.error ? action.error : ''\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const RegisterUserAC = (isRegistered: boolean, error = '') =>\r\n    ({type: 'REGISTER_USER', isRegistered, error} as const);\r\n\r\n//thunks\r\nexport const RegisterUserTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC('loading'));\r\n    registrationAPI.registration(email, password)\r\n        .then(res => {\r\n            dispatch(SetStatusAC('succeeded'));\r\n            dispatch(RegisterUserAC(true));\r\n        })\r\n        .catch(error => {\r\n            dispatch(SetStatusAC('failed'));\r\n            dispatch(RegisterUserAC(false, error.response.data.error));\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    isRegistered: boolean,\r\n    serverError: string,\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof RegisterUserAC>\r\n    | ReturnType<typeof SetStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React, {useEffect} from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport style from './Register.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    InitialStateType,\r\n    RegisterUserAC,\r\n    RegisterUserTC,\r\n    RequestStatusType\r\n} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validateRegisterForm} from '../../../../m4-utils/validators/validators';\r\n\r\nexport type RegisterErrorType = {\r\n    email?: string | undefined\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistered, serverError} = useSelector<RootState, InitialStateType>(state => state.register)\r\n    const status = useSelector<RootState,RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },validate: (values) => {\r\n            const errors: RegisterErrorType = {};\r\n            validateRegisterForm(values ,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterUserTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    useEffect(()=>{\r\n     return ()=>{\r\n         dispatch(RegisterUserAC(false))\r\n     }\r\n    },[dispatch])\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const errorElement = serverError ? <div className={style.error}>{serverError}</div> : null\r\n    return (\r\n        <div className={style.containerForm}>\r\n            <form className={style.form} onSubmit={formik.handleSubmit}>\r\n                <Input type={'text'}\r\n                       id={'email'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'password'}\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'repeatPassword'}\r\n                       placeholder={'Repeat password'}\r\n                       {...formik.getFieldProps('repeatPassword')}\r\n                />\r\n                {formik.errors.repeatPassword ? <div className={style.error}>{formik.errors.repeatPassword}</div> : null}\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name={'Register'}/>\r\n                }\r\n            </form>\r\n            {errorElement}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {forgotAPI} from \"../../m3-dal/api\";\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    email: \"\",\r\n    serverResponse: \"\",\r\n    serverError: \"\",\r\n    status: \"idle\"\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = InitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"EMAIL_TO_CHANGE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        case \"SAVE_SERVER_RESPONSE\":\r\n            return {\r\n                ...state,\r\n                serverResponse: action.answer\r\n            }\r\n        case \"SAVE_SERVER_ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setEmailToChangePasswordAC = (email: string) => ({type: 'EMAIL_TO_CHANGE_PASSWORD', email} as const)\r\nexport const SaveServerResponseAC = (answer: string) => ({type: 'SAVE_SERVER_RESPONSE', answer} as const)\r\nexport const SaveServerErrorAC = (error: string) => ({type: 'SAVE_SERVER_ERROR', error} as const)\r\n\r\nexport const passwordRecoveryTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC(\"loading\"))\r\n    forgotAPI.forgot(email)\r\n        .then((res) => {\r\n            dispatch(SetStatusAC(\"succeeded\"))\r\n            dispatch(setEmailToChangePasswordAC(email))\r\n            dispatch(SaveServerResponseAC(res.data.info))\r\n        })\r\n        .catch((err: serverErrorType) => {\r\n            dispatch(SetStatusAC(\"failed\"))\r\n            dispatch(SaveServerErrorAC(err.response.data.error))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = {\r\n    email: string\r\n    serverResponse: string\r\n    serverError: string\r\n    status: RequestStatusType\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setEmailToChangePasswordAC>\r\n    | ReturnType<typeof SaveServerResponseAC>\r\n    | ReturnType<typeof SaveServerErrorAC>\r\n\r\ntype serverErrorType = {\r\n    response: { data: dataServerErrorType }\r\n}\r\ntype dataServerErrorType = {\r\n    email: string\r\n    error: string\r\n    in: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {useFormik} from 'formik';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {\r\n    InitialStateType,\r\n    passwordRecoveryTC,\r\n    SaveServerErrorAC,\r\n    SaveServerResponseAC,\r\n} from '../../../../m2-bll/reducers/passwordRecoveryReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport style from './PasswordRecovery.module.css'\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validatePasswordRecoveryForm} from '../../../../m4-utils/validators/validators';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const {serverResponse, serverError} = useSelector<RootState, InitialStateType>(state => state.passwordRecover)\r\n    const status = useSelector<RootState,RequestStatusType>(state =>state.loader.status )\r\n    const dispatch = useDispatch()\r\n\r\n    const clearServerResponseAndError = () => {\r\n        dispatch(SaveServerResponseAC(\"\"))\r\n        dispatch(SaveServerErrorAC(\"\"))\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate : (values: { email: string }) => {\r\n            const errors: { email?: string } = {};\r\n            validatePasswordRecoveryForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={style.forgotStyle}>\r\n            <form onSubmit={formik.handleSubmit} className={style.formForgot}>\r\n                <div>Your Email:</div>\r\n                <Input placeholder={\"Email\"}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       type=\"email\"\r\n                       onFocus={clearServerResponseAndError}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Send\"}\r\n                            disabled={status === \"loading\" || !!serverError || !!serverResponse}/>\r\n                </div>\r\n            </form>\r\n            {status === \"loading\" ? <Loader/> : null}\r\n            {serverResponse || serverError}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {AuthResponseType} from '../../../../m3-dal/api';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {LogOut} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\n\r\nexport const Profile = () => {\r\n    const isAuth = useSelector<RootState, boolean>(state => state.login.isAuth)\r\n    const user = useSelector<RootState, AuthResponseType>(state => state.profile)\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.loader.status)\r\n    const dispatch = useDispatch()\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(LogOut())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>name : {user.name}</span>\r\n            </div>\r\n            <div>\r\n                <span>avatar : {user.avatar}</span>\r\n            </div>\r\n            <div>\r\n                <span>publicCardPacksCount : {user.publicCardPacksCount}</span>\r\n            </div>\r\n            {status === 'loading' ? <Loader/> :\r\n                <Button onClick={logoutHandler} name={'Logout'}/>}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {packsAPI} from '../../m3-dal/api';\r\n\r\nconst InitialState: InitialStateType = {\r\n    cardPacks: [{\r\n        _id: null,\r\n        user_id: null,\r\n        user_name: null,\r\n        private: null,\r\n        name: null,\r\n        path: null,\r\n        grade: null,\r\n        shots: null,\r\n        cardsCount: null,\r\n        type: null,\r\n        rating: null,\r\n        created: null,\r\n        updated: null,\r\n        more_id: null,\r\n        __v: null,\r\n        deckCover: null\r\n    },\r\n    ],\r\n    page: null,\r\n    pageCount: null,\r\n    cardPacksTotalCount: null,\r\n    minCardsCount: null,\r\n    maxCardsCount: null,\r\n    token: null,\r\n    tokenDeathTime: null,\r\n}\r\n\r\n\r\nexport const packsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, ...action.packs}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPacks = (packs: InitialStateType) => ({type: 'SET_PACKS', packs} as const)\r\n\r\n//thunks\r\nexport const getSetPacks = () => (dispatch: Dispatch) => {\r\n    packsAPI.getPacks()\r\n        .then(res => {\r\n            dispatch(setPacks(res.data))\r\n        })\r\n        .catch((err) => {\r\n\r\n        })\r\n}\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    cardPacks: Array<cardPack>\r\n    page: number | null\r\n    pageCount: number | null\r\n    cardPacksTotalCount: number | null\r\n    minCardsCount: number | null\r\n    maxCardsCount: number | null\r\n    token: string | null\r\n    tokenDeathTime: number | null\r\n}\r\nexport type cardPack = {\r\n    _id: string | null\r\n    user_id: string | null\r\n    user_name: string | null\r\n    private: boolean | null\r\n    name: string | null\r\n    path: string | null\r\n    grade: number | null\r\n    shots: number | null\r\n    cardsCount: number | null\r\n    type: string | null\r\n    rating: number | null\r\n    created: string | null\r\n    updated: string | null\r\n    more_id: string | null\r\n    __v: number | null\r\n    deckCover: null\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof setPacks>\r\n","import * as React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Styles from './Table.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {cardPack, getSetPacks} from '../../../m2-bll/reducers/packsReducer';\r\n\r\n\r\nexport const Table = () => {\r\n    const packs = useSelector<RootState, Array<cardPack>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getSetPacks())\r\n    }, [])\r\n\r\n    const renderRows = () => packs.map(row =>\r\n        <tr key={row._id}>\r\n            <td>{row.name}</td>\r\n            <td>{row.cardsCount}</td>\r\n            <td>{row.updated}</td>\r\n            <td>''</td>\r\n            <td>\r\n                <button>delete</button>\r\n            </td>\r\n            <td>\r\n                <button>update</button>\r\n            </td>\r\n            <td><Link to={'#'}>cards</Link></td>\r\n        </tr>\r\n    )\r\n    return (\r\n        <table className={Styles.table}>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>\r\n                    CardsCount\r\n                    <button className={Styles.arrow}>/\\</button>\r\n                    <button className={Styles.arrow}>\\/</button>\r\n                </th>\r\n                <th>Update</th>\r\n                <th>Url</th>\r\n                <th>\r\n                    <button>add</button>\r\n                </th>\r\n                <th></th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {renderRows()}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};","import React from \"react\";\r\nimport {Slider} from \"@material-ui/core\";\r\nimport style from \"./CommonSlider.module.css\"\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        color: \"black\",\r\n    }\r\n});\r\n\r\ntype Slider2Type = {\r\n    value: number[]\r\n    setValue:(newValue:number[]) => void\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport const CommonSlider = React.memo((props: Slider2Type) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        props.setValue(newValue as number[]);\r\n    };\r\n\r\n    return <div className={style.container}>\r\n        <div className={style.value}>\r\n            <span>{props.value[0]}</span>\r\n            <span>{props.value[1]}</span>\r\n        </div>\r\n        <Slider\r\n            className={classes.root}\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.value}\r\n            onChange={handleChange}\r\n            valueLabelDisplay=\"auto\"\r\n            aria-labelledby=\"range-slider\"\r\n        />\r\n    </div>\r\n})","import React, {useState} from 'react';\r\nimport {Table} from \"../../../common/Table/Table\";\r\nimport {CommonSlider} from \"../../../common/CommonSlider/CommonSlider\";\r\nimport {useFormik} from \"formik\";\r\nimport {Input} from \"../../../common/Input/Input\";\r\nimport {Button} from \"../../../common/Button/Button\";\r\nimport style from \"./Packs.module.css\"\r\n\r\n\r\nexport const Packs = () => {\r\n    const [value, setValue] =  useState([0, 100])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            search: ''\r\n        },\r\n        onSubmit: values => {\r\n            alert(values.search)\r\n            alert(value[0])\r\n            alert(value[1])\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit} className={style.formStyle}>\r\n                <Input placeholder={\"Search\"}\r\n                       id=\"search\"\r\n                       name=\"search\"\r\n                       type=\"text\"\r\n                       {...formik.getFieldProps('search')}\r\n                />\r\n                <CommonSlider value={value}\r\n                              setValue={setValue}\r\n                              min={0}\r\n                              max={100}/>\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Search\"}/>\r\n                </div>\r\n            </form>\r\n\r\n            <h1>Packs</h1>\r\n            <Table/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {login, newPassword, packs, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/p1-login/Login';\r\nimport {Register} from '../Main/Pages/p2-register/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/p3-passwordRecovery/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/p4-newPassword/NewPassword';\r\nimport {Profile} from '../Main/Pages/p5-profile/Profile';\r\nimport {Packs} from \"../Main/Pages/p6-packs/Packs\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={() => <Login/>}/>\r\n            <Route path={register} render={() => <Register/>}/>\r\n            <Route path={passwordRecovery} render={() => <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={() => <NewPassword/>}/>\r\n            <Route path={profile} render={() => <Profile/>}/>\r\n            <Route path={packs} render={() => <Packs/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Main} from './Main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\nimport {authMe} from '../m2-bll/reducers/loginReducer';\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecoveryReducer';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\nimport {loaderReducer} from './reducers/loaderReducer';\r\nimport {packsReducer} from './reducers/packsReducer';\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    loader: loaderReducer,\r\n    packs: packsReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './n1-main/m2-bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"Register_containerForm__1TkN8\",\"form\":\"Register_form__3jhg_\",\"error\":\"Register_error__3hqSw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Login_formContainer__WWFxh\",\"error\":\"Login_error__rS7O4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotStyle\":\"PasswordRecovery_forgotStyle__25qDt\",\"formForgot\":\"PasswordRecovery_formForgot__2bykr\",\"error\":\"PasswordRecovery_error__2zQep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2zNDP\",\"arrow\":\"Table_arrow__1Y0Sd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__21JlT\",\"active\":\"NavlinkCommon_active__2J4uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CommonSlider_container__I_JcE\",\"value\":\"CommonSlider_value__30TGB\",\"root\":\"CommonSlider_root__hWbh9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kZgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__1ggEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1GLt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P0gp\",\"active\":\"Button_active__15H3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Loader_ldsRing__37cMZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"Packs_formStyle__24Oxg\"};"],"sourceRoot":""}