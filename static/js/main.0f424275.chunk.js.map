{"version":3,"sources":["n1-main/m1-ui/Main/Pages/Register.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/Main/Pages/PasswordRecovery.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Loader/Loader.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/Main/Pages/Login.tsx","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m1-ui/common/Loader/Loader.tsx","n1-main/m1-ui/Main/Pages/Register.tsx","n1-main/m2-bll/reducers/passwordRecoveryReducer.ts","n1-main/m1-ui/Main/Pages/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/NewPassword.tsx","n1-main/m1-ui/Main/Pages/Profile.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Login","Input","React","memo","name","id","rest","input","Button","button","instance","axios","create","withCredentials","baseURL","forgotAPI","dataInForgot","post","InitialState","isRegistered","serverError","status","RegisterUserAC","error","type","SetStatusAC","RegisterUserTC","email","password","dispatch","registrationAPI","then","res","catch","response","data","Loader","ldsRing","Register","useDispatch","useSelector","state","register","formik","useFormik","initialValues","repeatPassword","validate","values","errors","test","length","onSubmit","errorElement","containerForm","form","handleSubmit","placeholder","getFieldProps","serverResponse","SaveServerResponseAC","answer","SaveServerErrorAC","PasswordRecovery","passwordRecover","from","message","info","err","passwordRecoveryTC","forgotStyle","formForgot","onChange","handleChange","value","onFocus","NewPassword","Profile","Routes","routes","path","render","Main","App","Boolean","window","location","hostname","match","reducers","combineReducers","login","action","newPassword","profile","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.0f424275.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"Register_containerForm__374RV\",\"form\":\"Register_form__1tDJh\",\"error\":\"Register_error__2ss3E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__21JlT\",\"active\":\"NavlinkCommon_active__2J4uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotStyle\":\"PasswordRecovery_forgotStyle__3qR_w\",\"formForgot\":\"PasswordRecovery_formForgot__KPRD_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kZgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__1ggEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1GLt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P0gp\",\"buton\":\"Button_buton__1g8Pz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Loader_ldsRing__37cMZ\"};","import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {login, newPassword, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';","import React from 'react';\r\n\r\nexport const Login = () => {\r\n    return <div>login</div>\r\n}","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType =\r\n    React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & {\r\n    name?: string,\r\n    id?: string\r\n};\r\n\r\nexport const Input : FC<InputPropsType> = React.memo (({name,id,...rest}) => {\r\n    return <input className={style.input} {...rest} id={id} ></input>\r\n})","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button : FC<ButtonPropsType> = ({name,...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\nexport const forgotAPI = {\r\n    forgot(dataInForgot: dataInForgotType) {\r\n        return instance.post<ResponseType>(\"/auth/forgot\", dataInForgot)\r\n    }\r\n}\r\n\r\nexport type dataInForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport const registrationAPI = (email: string, password: string) => {\r\n        return instance.post('/auth/register',{email, password});\r\n}","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../m3-dal/api';\r\n\r\nconst InitialState : InitialStateType = {\r\n    isRegistered: false,\r\n    serverError: '',\r\n    status: 'idle'\r\n}\r\n\r\nexport const registerReducer = (state = InitialState, action: ActionsType) : InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER_USER': {\r\n            return {\r\n                ...state,\r\n                isRegistered : action.isRegistered,\r\n                serverError: action.error ? action.error : ''\r\n            }\r\n        }\r\n        case 'SET_STATUS': {\r\n            return {...state,status : action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const RegisterUserAC = (isRegistered : boolean, error= '') =>\r\n    ({type: 'REGISTER_USER',isRegistered,error} as const);\r\nexport const SetStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'SET_STATUS',status} as const);\r\n\r\n//thunks\r\nexport const RegisterUserTC = (email: string,password: string) => (dispatch: Dispatch) => {\r\n            dispatch(SetStatusAC('loading'));\r\n    registrationAPI(email, password)\r\n        .then(res => {\r\n            dispatch(SetStatusAC('succeeded'));\r\n            dispatch(RegisterUserAC(true));\r\n        })\r\n        .catch(error => {\r\n            dispatch(SetStatusAC('failed'));\r\n            dispatch(RegisterUserAC(false,error.response.data.error));\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    isRegistered: boolean,\r\n    serverError: string,\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof RegisterUserAC>\r\n    | ReturnType<typeof SetStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return <div className={style.ldsRing}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {Input} from '../../common/Input/Input';\r\nimport {Button} from '../../common/Button/Button';\r\nimport style from './Register.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {InitialStateType, RegisterUserTC} from '../../../m2-bll/reducers/registerReducer';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../routes/RoutePass';\r\nimport {Loader} from '../../common/Loader/Loader';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistered, serverError, status} = useSelector<RootState, InitialStateType>(state => state.register)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 5 characters or more';\r\n            }\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 5 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterUserTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const errorElement = serverError ? <div className={style.error}>{serverError}</div> : null\r\n    return (\r\n        <div className={style.containerForm}>\r\n            <form className={style.form} onSubmit={formik.handleSubmit}>\r\n                <Input type={'text'}\r\n                       id={'email'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'password'}\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'repeatPassword'}\r\n                       placeholder={'Repeat password'}\r\n                       {...formik.getFieldProps('repeatPassword')}\r\n                />\r\n                {formik.errors.repeatPassword ? <div className={style.error}>{formik.errors.repeatPassword}</div> : null}\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name={'Register'}/>\r\n                }\r\n            </form>\r\n            {errorElement}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {dataInForgotType, forgotAPI} from \"../../m3-dal/api\";\r\n\r\ntype ActionType = ReturnType<typeof setEmailToChangePasswordAC>\r\n    | ReturnType<typeof SaveServerResponseAC>\r\n    | ReturnType<typeof SaveServerErrorAC>\r\n\r\nexport type InitialStateType = {\r\n    email: string\r\n    serverResponse: string\r\n    serverError: string\r\n}\r\n\r\nconst InitialState = {\r\n    email: \"\",\r\n    serverResponse: \"\",\r\n    serverError: \"\"\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = InitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"EMAIL_TO_CHANGE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        case \"SAVE_SERVER_RESPONSE\":\r\n            return {\r\n                ...state,\r\n                serverResponse: action.answer\r\n            }\r\n        case \"SAVE_SERVER_ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setEmailToChangePasswordAC = (email: string) => ({type: 'EMAIL_TO_CHANGE_PASSWORD', email} as const)\r\nexport const SaveServerResponseAC = (answer: string) => ({type: 'SAVE_SERVER_RESPONSE', answer} as const)\r\nexport const SaveServerErrorAC = (error: string) => ({type: 'SAVE_SERVER_ERROR', error} as const)\r\n\r\nexport const passwordRecoveryTC = (dataInForgot: dataInForgotType) => (dispatch: Dispatch) => {\r\n    forgotAPI.forgot(dataInForgot)\r\n        .then((res) => {\r\n            dispatch(setEmailToChangePasswordAC(dataInForgot.email))\r\n            dispatch(SaveServerResponseAC(res.data.info))\r\n        })\r\n        .catch((err: serverErrorType) => {\r\n           dispatch(SaveServerErrorAC(err.response.data.error))\r\n        })\r\n}\r\n\r\ntype serverErrorType = {\r\n    response: {data: dataServerErrorType}\r\n}\r\ntype dataServerErrorType = {\r\n    email: string\r\n    error: string\r\n    in: string\r\n}","import React from 'react';\r\nimport {Input} from \"../../common/Input/Input\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {\r\n    InitialStateType,\r\n    passwordRecoveryTC, SaveServerErrorAC, SaveServerResponseAC,\r\n} from \"../../../m2-bll/reducers/passwordRecoveryReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../m2-bll/store\";\r\nimport {dataInForgotType} from \"../../../m3-dal/api\";\r\nimport style from \"./PasswordRecovery.module.css\"\r\n\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const {serverResponse, serverError} = useSelector<RootState, InitialStateType>(state => state.passwordRecover)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (values: {email: string}) => {\r\n        const dataInForgot: dataInForgotType = {\r\n            email: values.email,\r\n            from: \"test-front-admin\",\r\n            message: `<div style=\"background-color: gold; padding: 15px\">Password recover link:\r\n                    <a href=\"http://localhost:3000/alekseidarafeichyk/cards#/new_password/$token$\">link</a>\r\n                </div>`\r\n        }\r\n        dispatch(passwordRecoveryTC(dataInForgot))\r\n    }\r\n\r\n    const clearServerResponseAndError = () => {\r\n        dispatch(SaveServerResponseAC(\"\"))\r\n        dispatch(SaveServerErrorAC(\"\"))\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        onSubmit,\r\n    });\r\n\r\n    return (\r\n        <div className={style.forgotStyle}>\r\n            <form onSubmit={formik.handleSubmit} className={style.formForgot}>\r\n                <div>Your Email:</div>\r\n                <Input placeholder={\"email\"}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       type=\"email\"\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.email}\r\n                       onFocus={clearServerResponseAndError}\r\n                />\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Send\"}/>\r\n                </div>\r\n            </form>\r\n            {serverResponse || serverError}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\n\r\nexport const Profile = () => {\r\n    return <div>Profile</div>\r\n}","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {login, newPassword, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/Login';\r\nimport {Register} from '../Main/Pages/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/NewPassword';\r\nimport { Profile } from '../Main/Pages/Profile';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={()=> <Login/>}/>\r\n            <Route path={register} render={()=> <Register/>}/>\r\n            <Route path={passwordRecovery} render={()=> <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={()=> <NewPassword/>}/>\r\n            <Route path={profile} render={()=> <Profile/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from './Main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={'App'}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const InitialState = {}\r\n\r\nexport const loginReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const profileReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecoveryReducer';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './n1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}