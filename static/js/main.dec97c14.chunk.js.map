{"version":3,"sources":["n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/reducers/loaderReducer.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m1-ui/common/Loader/Loader.tsx","n1-main/m1-ui/Main/Pages/p1-login/Login.tsx","n1-main/m4-utils/validators/validators.ts","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m1-ui/Main/Pages/p2-register/Register.tsx","n1-main/m2-bll/reducers/passwordRecoveryReducer.ts","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/p4-newPassword/NewPassword.tsx","n1-main/m1-ui/Main/Pages/p5-profile/Profile.tsx","n1-main/m2-bll/reducers/dataForGetRequestReducer.ts","n1-main/m2-bll/reducers/packsReducer.ts","n1-main/m1-ui/common/EditableField/EditableField.tsx","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/CommonSlider/CommonSlider.tsx","n1-main/m1-ui/Main/Pages/p6-packs/Paginator/Paginator.tsx","n1-main/m1-ui/Main/Pages/p6-packs/Packs.tsx","n1-main/m2-bll/reducers/cardsReducer.ts","n1-main/m1-ui/common/Table/TableCards.tsx","n1-main/m1-ui/Main/Pages/p7-cards/Cards.tsx","n1-main/m1-ui/Main/Pages/p8-learn/Learn.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/common/Table/Table.module.css","n1-main/m1-ui/Main/Pages/p2-register/Register.module.css","n1-main/m1-ui/Main/Pages/p1-login/Login.module.css","n1-main/m1-ui/Main/Pages/p3-passwordRecovery/PasswordRecovery.module.css","n1-main/m1-ui/Main/Pages/p8-learn/Learn.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/common/CommonSlider/CommonSlider.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Loader/Loader.module.css","n1-main/m1-ui/Main/Pages/p6-packs/Packs.module.css"],"names":["NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Input","React","memo","name","id","rest","input","Button","button","instance","axios","create","withCredentials","baseURL","authAPI","post","authUserData","delete","registrationAPI","email","password","forgotAPI","from","message","packsAPI","requestParameters","userID","pageCount","page","sortPacks","max","min","packName","get","cardsPack","put","_id","cardsAPI","packId","question","answer","card","cardsPack_id","comments","learnAPI","grade","card_id","InitialState","rememberMe","isAdmin","verified","publicCardPacksCount","created","updated","__v","token","tokenDeathTime","avatar","setDeleteUserProfile","user","type","status","SetStatusAC","isAuth","setIsAuth","Loader","ldsRing","Login","dispatch","useDispatch","useSelector","state","login","loader","formik","useFormik","initialValues","validate","values","errors","test","length","validateLoginForm","onSubmit","then","response","data","catch","err","error","console","log","formContainer","handleSubmit","placeholder","getFieldProps","isRegistered","serverError","RegisterUserAC","Register","register","repeatPassword","validateRegisterForm","res","useEffect","errorElement","containerForm","form","serverResponse","SaveServerResponseAC","SaveServerErrorAC","PasswordRecovery","passwordRecover","validatePasswordRecoveryForm","setEmailToChangePasswordAC","info","forgotStyle","formForgot","onFocus","disabled","NewPassword","Profile","profile","onClick","initialState","checkedMyPacks","cardPacksTotalCount","setSortPacksAC","setPageAC","setCheckedMyPacksAC","checked","cardPacks","user_id","user_name","private","path","shots","cardsCount","rating","more_id","deckCover","minCardsCount","maxCardsCount","getPacksThunk","userId","getState","dataGetRequest","TotalCount","packs","alert","EditableField","useState","editMode","setEditMode","value","setValue","onDisableEditMode","updatePackAC","updatePackTC","Styles","editButton","onChange","e","currentTarget","MySwal","withReactContent","Swal","Table","onClickAddPack","fire","title","html","showCancelButton","confirmButtonText","confirmButtonColor","preConfirm","document","getElementById","result","isConfirmed","pack","newCardsPack","onClickDeletePack","deletePackAC","deletePackTC","table","arrow","map","row","key","useStyles","makeStyles","root","width","color","CommonSlider","classes","container","Slider","event","newValue","valueLabelDisplay","aria-labelledby","Paginator","HowManyCounts","Math","ceil","setPageCountAC","containerPages","Pagination","count","Packs","search","formStyle","Checkbox","cards","cardsTotalCount","maxGrade","minGrade","getCards","sendGradeTC","TableCards","onClickAddCard","newCard","onClickDeleteCard","deleteCardAC","deletedCard","deleteCardTC","onClickUpdateCard","updateCardAC","updateCardTC","Cards","useParams","grades","getCard","sum","reduce","acc","rand","random","i","newSum","LearnPage","isChecked","setIsChecked","first","setFirst","disable","setDisable","setCard","sendRatingOnClick","a","AllLearn","g","Routes","routes","render","Main","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","newPassword","filter","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"kPASaA,EAAiB,SAACC,GAC3B,OAAO,kBAAC,IAAD,CAASC,GAAID,EAAMC,GAAIC,UAAWC,IAAMC,KAAMC,gBAAiBF,IAAMG,QAASN,EAAMO,WCLlFC,EAAS,WAClB,OACI,yBAAKN,UAAWC,IAAMM,QAClB,kBAAC,EAAD,CAAeR,GCRE,SDQSM,SAAU,UACpC,kBAAC,EAAD,CAAeN,GCRK,YDQSM,SAAU,aACvC,kBAAC,EAAD,CAAeN,GCRa,qBDQSM,SAAU,sBAC/C,kBAAC,EAAD,CAAeN,GCRQ,gBDQSM,SAAU,iBAC1C,kBAAC,EAAD,CAAeN,GCRI,WDQSM,SAAU,YACtC,kBAAC,EAAD,CAAeN,GCRE,SDQSM,SAAU,Y,gEEHnCG,EAA6BC,IAAMC,MAAM,YAAuB,EAArBC,KAAsB,IAAjBC,EAAgB,EAAhBA,GAAMC,EAAU,6BACzE,OAAO,yCAAOb,UAAWC,IAAMa,OAAWD,EAAnC,CAAyCD,GAAIA,Q,wBCJ3CG,EAA8BN,IAAMC,MAAK,YAAsB,IAApBC,EAAmB,EAAnBA,KAASE,EAAU,wBACvE,OAAO,0CAAQb,UAAWC,IAAMe,QACbH,GAEdF,M,uBCRHM,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,wCAIAC,EAAU,WAEf,OAAOL,EAASM,KAAuB,WAAY,KAF9CD,EAAU,SAIbE,GACF,OAAOP,EAASM,KAAuB,cAAhC,eAAmDC,KALrDF,EAAU,WAQf,OAAOL,EAASQ,OAAO,aAIlBC,EAAkB,SACdC,EAAeC,GACxB,OAAOX,EAASM,KAAK,iBAAkB,CAACI,QAAOC,cAI1CC,EAAY,SACdF,GACH,OAAOV,EAASM,KAAmB,eAAgB,CAC/CI,MAAOA,EACPG,KAAM,mBACNC,QAAQ,iNAOPC,EAAW,SACXC,GAAyD,IAAXC,EAAU,uDAAH,GACnDC,EAA6CF,EAA7CE,UAAUC,EAAmCH,EAAnCG,KAAKC,EAA8BJ,EAA9BI,UAAUC,EAAoBL,EAApBK,IAAIC,EAAgBN,EAAhBM,IAAIC,EAAYP,EAAZO,SACxC,OAAOvB,EAASwB,IAAT,+BAAqCD,EAArC,gBAAqDD,EAArD,gBAAgED,EAAhE,sBAAiFH,EAAjF,iBAAmGC,EAAnG,sBAAqHC,EAArH,oBAA0IH,KAH5IF,EAAW,SAKZQ,GACJ,OAAOvB,EAASM,KAAK,cAAe,CAACmB,UAAW,CAAC/B,KAAM6B,MANlDR,EAAW,SAQTpB,GACP,OAAOK,EAASQ,OAAT,yBAAkCb,KATpCoB,EAAW,SAWTpB,EAAmBD,GAC1B,OAAOM,EAAS0B,IAAI,cAAe,CAACD,UAAW,CAACE,IAAKhC,EAAID,WAKpDkC,EAAW,SACXC,GAA0C,IAA1BX,EAAyB,uDAAb,EAAGC,EAAU,uDAAH,EAC3C,OAAOnB,EAASwB,IAAT,gCAAsCN,EAAtC,iBAAwDC,EAAxD,yBAA6EU,KAF/ED,EAAW,SAIZC,EAAgBC,EAAiBC,GACrC,OAAO/B,EAASM,KAAK,cAAe,CAAC0B,KAAM,CAACC,aAAcJ,EAAQC,WAAUC,aALvEH,EAAW,SAOTjC,GACP,OAAOK,EAASQ,OAAT,yBAAkCb,KARpCiC,EAAW,SAUTjC,EAAmBmC,EAAkBI,GAC5C,OAAOlC,EAAS0B,IAAI,cAAe,CAACM,KAAM,CAACL,IAAKhC,EAAImC,WAAUI,eAIzDC,EAAW,SACVC,EAAsBC,GAC5B,OAAOrC,EAAS0B,IAAI,eAAgB,CAACU,QAAOC,aCvE9CC,EAAkC,CACpCX,IAAI,GACJjB,MAAM,GACN6B,YAAW,EACXC,SAAQ,EACR9C,KAAK,GACL+C,UAAS,EACTC,qBAAqB,EACrBC,QAAQ,GACRC,QAAQ,GACRC,IAAI,EACJC,MAAM,GACNC,eAAgB,EAChBC,OAAQ,eAaCC,EAAuB,SAACC,GAAD,MAA4B,CAACC,KAAM,kBAAmBD,SC1BpFZ,EAAiC,CACnCc,OAAQ,QAeCC,EAAc,SAACD,GAAD,MACtB,CAACD,KAAM,aAAcC,WCdpBd,EAAe,CACjBgB,QAAQ,EACRF,OAAQ,QAkBNG,EAAY,SAACD,GAAD,MAAsB,CAACH,KAAM,oBAAqBG,W,mCCtBvDE,GAAS,WAClB,OAAO,yBAAKzE,UAAWC,KAAMyE,SACzB,8BACA,8BACA,8BACA,gCCYKC,GAAQ,WACjB,IAAMC,EAAWC,cACXN,EAASO,aAAY,SAACC,GAAD,OAAsBA,EAAMC,MAAMT,UACvDF,EAASS,aAA0C,SAAAC,GAAK,OAAIA,EAAME,OAAOZ,UAEzEa,EAASC,YAAU,CACrBC,cAAe,CACXzD,MAAO,GACPC,SAAU,GACV4B,YAAY,GAEhB6B,SAAU,SAAAC,GACN,IAAMC,EAAmB,GAEzB,OCLqB,SAACD,EAA0BC,GACnDD,EAAO3D,MAEA,4CAA4C6D,KAAKF,EAAO3D,SAChE4D,EAAO5D,MAAQ,yBAFf4D,EAAO5D,MAAQ,oBAKd2D,EAAO1D,SAED0D,EAAO1D,SAAS6D,OAAS,IAChCF,EAAO3D,SAAW,gCAFlB2D,EAAO3D,SAAW,oBDJd8D,CAAkBJ,EAAOC,GAClBA,GAEXI,SAAU,SAAAL,GFRG,IAAC9D,EESVoD,GFTUpD,EESK,eAAI8D,GFTsB,SAACV,GAClDA,EAASN,EAAY,YACrBhD,EAAA,eAAkBE,IACboE,MAAK,SAAAC,GACFjB,EAASN,EAAY,cACrBM,EAASV,EAAqB2B,EAASC,OACvClB,EAASJ,GAAU,OACpBuB,OAAM,SAAAC,GACTpB,EAASN,EAAY,WACrB,IAAI2B,EAAQD,EAAIH,SAAWG,EAAIH,SAASC,KAAKG,MAAQD,EAAIjE,QACzDmE,QAAQC,IAAIF,YEIhB,OAAI1B,EACO,kBAAC,IAAD,CAAUxE,GRvCM,aQ2CvB,yBAAKC,UAAWC,IAAMmG,eAClB,0BAAMT,SAAUT,EAAOmB,cACnB,kBAAC7F,EAAD,eACII,GAAI,QACJwD,KAAM,OACNkC,YAAa,oBACTpB,EAAOqB,cAAc,WAE5BrB,EAAOK,OAAO5D,MAAQ,yBAAK3B,UAAWC,IAAMgG,OAAQf,EAAOK,OAAO5D,OAAe,KAClF,kBAACnB,EAAD,eACII,GAAI,WACJ0F,YAAa,WACblC,KAAM,YACFc,EAAOqB,cAAc,cAE5BrB,EAAOK,OAAO3D,SAAW,yBAAK5B,UAAWC,IAAMgG,OAAQf,EAAOK,OAAO3D,UAAkB,KAd5F,eAegB,yCACZwC,KAAM,YACFc,EAAOqB,cAAc,gBAEb,YAAXlC,EACG,kBAAC,GAAD,MAEA,kBAACtD,EAAD,CAAQqD,KAAK,SAASzD,KAAK,e,oBElEzC4C,GAAiC,CACnCiD,cAAc,EACdC,YAAa,GACbpC,OAAQ,QAkBCqC,GAAiB,SAACF,GAAD,IAAwBP,EAAxB,uDAAgC,GAAhC,MACzB,CAAC7B,KAAM,gBAAiBoC,eAAcP,UCF9BU,GAAW,WACpB,IAAM/B,EAAWC,cADS,EAEUC,aAAyC,SAAAC,GAAK,OAAIA,EAAM6B,YAArFJ,EAFmB,EAEnBA,aAAcC,EAFK,EAELA,YACfpC,EAASS,aAAyC,SAAAC,GAAK,OAAIA,EAAME,OAAOZ,UAExEa,EAASC,YAAU,CACrBC,cAAe,CACXzD,MAAO,GACPC,SAAU,GACViF,eAAgB,IAClBxB,SAAU,SAACC,GACT,IAAMC,EAA4B,GAElC,OF5BwB,SAACD,EAA4BC,GACxDD,EAAO3D,MAEA,4CAA4C6D,KAAKF,EAAO3D,SAChE4D,EAAO5D,MAAQ,yBAFf4D,EAAO5D,MAAQ,oBAKf2D,EAAO1D,SAEA0D,EAAO1D,SAAS6D,OAAS,IAChCF,EAAO3D,SAAW,gCAFlB2D,EAAO3D,SAAW,qBAKlB,OAAC0D,QAAD,IAACA,OAAD,EAACA,EAAQuB,gBAEFvB,EAAOuB,eAAepB,OAAS,IACtCF,EAAO3D,SAAW,gCAFlB2D,EAAOsB,eAAiB,oBEapBC,CAAqBxB,EAAQC,GACtBA,GAEXI,SAAU,SAAAL,GDVY,IAAC3D,EAAeC,ECWlCgD,GDXmBjD,ECWK2D,EAAO3D,MDXGC,ECWI0D,EAAO1D,SDXU,SAACgD,GAChEA,EAASN,EAAY,YACrB5C,EAA6BC,EAAOC,GAC/BgE,MAAK,SAAAmB,GACFnC,EAASN,EAAY,cACrBM,EAAS8B,IAAe,OAE3BX,OAAM,SAAAE,GACHrB,EAASN,EAAY,WACrBM,EAAS8B,IAAe,EAAOT,EAAMJ,SAASC,KAAKG,iBCY3D,GANAe,qBAAU,WACT,OAAO,WACHpC,EAAS8B,IAAe,OAE3B,CAAC9B,IAEC4B,EACA,OAAO,kBAAC,IAAD,CAAUzG,GXnDI,WWsDzB,IAAMkH,EAAeR,EAAc,yBAAKzG,UAAWC,KAAMgG,OAAQQ,GAAqB,KACtF,OACI,yBAAKzG,UAAWC,KAAMiH,eAClB,0BAAMlH,UAAWC,KAAMkH,KAAMxB,SAAUT,EAAOmB,cAC1C,kBAAC7F,EAAD,eAAO4D,KAAM,OACNxD,GAAI,QACJ0F,YAAa,SACTpB,EAAOqB,cAAc,WAE/BrB,EAAOK,OAAO5D,MAAQ,yBAAK3B,UAAWC,KAAMgG,OAAQf,EAAOK,OAAO5D,OAAe,KAClF,kBAACnB,EAAD,eAAO4D,KAAM,WACNxD,GAAI,WACJ0F,YAAa,YACTpB,EAAOqB,cAAc,cAE/BrB,EAAOK,OAAO3D,SAAW,yBAAK5B,UAAWC,KAAMgG,OAAQf,EAAOK,OAAO3D,UAAkB,KACxF,kBAACpB,EAAD,eAAO4D,KAAM,WACNxD,GAAI,iBACJ0F,YAAa,mBACTpB,EAAOqB,cAAc,oBAE/BrB,EAAOK,OAAOsB,eAAiB,yBAAK7G,UAAWC,KAAMgG,OAAQf,EAAOK,OAAOsB,gBAAwB,KACxF,YAAXxC,EACG,kBAAC,GAAD,MAEA,kBAACtD,EAAD,CAAQqD,KAAK,SAASzD,KAAM,cAGnCsG,IC9EP1D,GAAiC,CACnC5B,MAAO,GACPyF,eAAgB,GAChBX,YAAa,GACbpC,OAAQ,QA0BCgD,GAAuB,SAACrE,GAAD,MAAqB,CAACoB,KAAM,uBAAwBpB,WAC3EsE,GAAoB,SAACrB,GAAD,MAAoB,CAAC7B,KAAM,oBAAqB6B,U,oBClBpEsB,GAAmB,WAAO,IAAD,EAEIzC,aAAyC,SAAAC,GAAK,OAAIA,EAAMyC,mBAAvFJ,EAF2B,EAE3BA,eAAgBX,EAFW,EAEXA,YACjBpC,EAASS,aAAyC,SAAAC,GAAK,OAAGA,EAAME,OAAOZ,UACvEO,EAAWC,cAOXK,EAASC,YAAU,CACrBC,cAAe,CACXzD,MAAO,IAEX0D,SAAW,SAACC,GACR,IAAMC,EAA6B,GAEnC,OJQgC,SAACD,EAA0BC,GAC9DD,EAAO3D,MAEA,4CAA4C6D,KAAKF,EAAO3D,SAChE4D,EAAO5D,MAAQ,yBAFf4D,EAAO5D,MAAQ,oBIXX8F,CAA6BnC,EAAOC,GAC7BA,GAEXI,SAAU,SAAAL,GDAgB,IAAC3D,ECCvBiD,GDDuBjD,ECCK2D,EAAO3D,MDDM,SAACiD,GAClDA,EAASN,EAAY,YACrBzC,EAAiBF,GACZiE,MAAK,SAACmB,GACHnC,EAASN,EAAY,cACrBM,EAT8B,SAACjD,GAAD,MAAoB,CAACyC,KAAM,2BAA4BzC,SAS5E+F,CAA2B/F,IACpCiD,EAASyC,GAAqBN,EAAIjB,KAAK6B,UAE1C5B,OAAM,SAACC,GACJpB,EAASN,EAAY,WACrBM,EAAS0C,GAAkBtB,EAAIH,SAASC,KAAKG,iBCLrD,OACI,yBAAKjG,UAAWC,KAAM2H,aAClB,0BAAMjC,SAAUT,EAAOmB,aAAcrG,UAAWC,KAAM4H,YAClD,4CACA,kBAACrH,EAAD,eAAO8F,YAAa,QACb1F,GAAG,QACHD,KAAK,QACLyD,KAAK,QACL0D,QA3BiB,WAChClD,EAASyC,GAAqB,KAC9BzC,EAAS0C,GAAkB,OA0BRpC,EAAOqB,cAAc,WAE/BrB,EAAOK,OAAO5D,MAAQ,yBAAK3B,UAAWC,KAAMgG,OAAQf,EAAOK,OAAO5D,OAAe,KAClF,6BACI,kBAACZ,EAAD,CAAQqD,KAAK,SAASzD,KAAM,OACpBoH,SAAqB,YAAX1D,KAA0BoC,KAAiBW,MAGzD,YAAX/C,EAAuB,kBAAC,GAAD,MAAY,KACnC+C,GAAkBX,IC1DlBuB,GAAc,WACvB,OAAO,6CCQEC,GAAU,WACnB,IAAM1D,EAASO,aAAgC,SAAAC,GAAK,OAAIA,EAAMC,MAAMT,UAC9DJ,EAAOW,aAAyC,SAAAC,GAAK,OAAIA,EAAMmD,WAC/D7D,EAASS,aAA0C,SAAAC,GAAK,OAAIA,EAAME,OAAOZ,UACzEO,EAAWC,cAEjB,IAAKN,EACD,OAAO,kBAAC,IAAD,CAAUxE,GflBI,WeyBzB,OACI,6BACI,6BACI,wCAAcoE,EAAKxD,OAEvB,6BACI,0CAAgBwD,EAAKF,SAEzB,6BACI,wDAA8BE,EAAKR,uBAE3B,YAAXU,EAAuB,kBAAC,GAAD,MACpB,kBAACtD,EAAD,CAAQoH,QAhBE,WAClBvD,GTmBoB,SAACA,GACzBA,EAASN,EAAY,YACrBhD,IACKsE,MAAK,SAAAC,GAgBFjB,EAASN,EAAY,cACrBM,EAASV,EAhBkB,CACvBtB,IAAK,GACLjB,MAAO,GACP6B,YAAY,EACZC,SAAS,EACT9C,KAAM,GACN+C,UAAU,EACVC,qBAAsB,EACtBC,QAAS,GACTC,QAAS,GACTC,IAAK,EACLC,MAAO,GACPC,eAAgB,EAChBC,OAAQ,iBAIZW,EAASJ,GAAU,OACpBuB,OAAM,SAAAC,GACTpB,EAASN,EAAY,WACrB,IAAI2B,EAAQD,EAAIH,SAAWG,EAAIH,SAASC,KAAKG,MAAQD,EAAIjE,QACzDmE,QAAQC,IAAIF,US7B4BtF,KAAM,a,sCCrChDyH,GAA2C,CAC7C5F,SAAU,GACVD,IAAK,EACLD,IAAK,IACLD,UAAW,cACXD,KAAM,EACND,UAAW,EACXkG,gBAAgB,EAChBC,oBAAqB,GAuCZC,GAAiB,SAAClG,GAAD,MAA+B,CAAC+B,KAAM,iBAAkB/B,cACzEmG,GAAY,SAACpG,GAAD,MAAmB,CAACgC,KAAM,WAAYhC,SAElDqG,GAAsB,SAACC,GAAD,MAAuB,CAACtE,KAAM,uBAAwBsE,YC7CnFnF,GAAiC,CACnCoF,UAAW,CAAC,CACR/F,IAAK,KACLgG,QAAS,KACTC,UAAW,KACXC,QAAS,KACTnI,KAAM,KACNoI,KAAM,KACN1F,MAAO,KACP2F,MAAO,KACPC,WAAY,KACZ7E,KAAM,KACN8E,OAAQ,KACRtF,QAAS,KACTC,QAAS,KACTsF,QAAS,KACTrF,IAAK,KACLsF,UAAW,OAGfhH,KAAM,EACND,UAAW,EACXmG,oBAAqB,EACrBe,cAAe,EACfC,cAAe,EACfvF,MAAO,KACPC,eAAgB,MAiCPuF,GAAgB,SAACC,GAAD,OAAqB,SAAC5E,EAAoB6E,GACnE,IAAM1E,EAAQ0E,IAERxH,EAAoB,CACtBO,SAAUuC,EAAM2E,eAAelH,SAC/BD,IAAKwC,EAAM2E,eAAenH,IAC1BD,IAAKyC,EAAM2E,eAAepH,IAC1BD,UAAW0C,EAAM2E,eAAerH,UAChCD,KAAM2C,EAAM2E,eAAetH,KAC3BD,UAAW4C,EAAM2E,eAAevH,UAChCkG,eAAgBtD,EAAM2E,eAAerB,eACrCC,oBAAqBvD,EAAM2E,eAAepB,qBAG9CtG,EAAkBC,EAAmBuH,GAChC5D,MAAK,SAAAmB,GACFnC,ED7BiD,CAACR,KAAM,wBAAyBuF,WC6BnD5C,EAAIjB,KAAKwC,sBACvC1D,EAAS4D,GAAUzB,EAAIjB,KAAK1D,OAC5BwC,EAzB0C,CAACR,KAAM,YAAawF,MAyB5C7C,EAAIjB,UAEzBC,OAAM,SAACC,GACJ6D,MAAM7D,QCzEL8D,GAAgB,SAAChK,GAAkB,IAAD,EAEXiK,oBAAS,GAFE,oBAEpCC,EAFoC,KAE1BC,EAF0B,OAGjBF,mBAASjK,EAAMa,MAHE,oBAGpCuJ,EAHoC,KAG7BC,EAH6B,KAIpCvF,EAAWC,cAOZuF,EAAoB,SAACxJ,GACvBgE,EDqFoB,SAAChE,EAAmBD,GAApB,OAAqC,SAACiE,GAC9D5C,EAAoBpB,EAAID,GACnBiF,MAAK,SAACmB,GACHnC,EApDgB,SAAChE,EAAmBD,GAApB,MAAsC,CAACyD,KAAM,cAAexD,KAAID,QAoDvE0J,CAAazJ,EAAID,OAE7BoF,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,QC3FXsE,CAAa1J,EAAIsJ,IAC1BD,GAAY,IAOhB,OACID,EACM,oCACE,kBAACjJ,EAAD,CAAQf,UAAWuK,KAAOC,WAAY7J,KAAM,KAAMwH,QAAS,kBAAMiC,EAAkBtK,EAAMc,OACzF,kBAACJ,EAAD,CAAO0J,MAAOA,EAAOO,SARX,SAACC,GACnBP,EAASO,EAAEC,cAAcT,WASpB,oCACIpK,EAAMa,KACP,kBAACI,EAAD,CAAQf,UAAWuK,KAAOC,WAAY7J,KAAM,OAAQwH,QAAS,WApBrE8B,GAAY,Q,wCCCdW,GAASC,KAAiBC,MAGnBC,GAAQtK,IAAMC,MAAK,WAG5B,IAAMwB,EAAS4C,aAA+B,SAAAC,GAAK,OAAIA,EAAMmD,QAAQtF,OAC9DyF,EAAkBvD,aAAmD,SAAAC,GAAK,OAAIA,EAAM2E,kBAApFrB,eACDuB,EAAQ9E,aAAwC,SAAAC,GAAK,OAAIA,EAAM6E,MAAMjB,aACrE/D,EAAWC,cAIXmG,EAAiB,WACpBJ,GAAOK,KAAK,CACHC,MAAO,eACPC,KAAM,kBAAC3K,EAAD,CAAOI,GAAI,cAAe0F,YAAa,oBAC7C8E,kBAAkB,EAClBC,kBAAkB,OAClBC,mBAAoB,UACpBC,WAAY,WACR,MAAO,CACP/I,SAAWgJ,SAASC,eAAe,eAAoCvB,UAG5EtE,MAAK,SAAC8F,GF2CO,IAAClJ,EE1CTkJ,EAAOC,cACP/G,GFyCSpC,EEzCakJ,EAAOxB,MAAO1H,SFyCN,SAACoC,EAAoB6E,GACnEzH,EAAiBQ,GACZoD,MAAK,SAACmB,GACHnC,EAlCqC,CAACR,KAAM,WAAYwH,KAkClC7E,EAAIjB,KAAK+F,kBAElC9F,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,UE9CR8E,KAAKG,KAAK,iBAAkB,GAAI,gBAK1Ca,EAAoB,SAAClL,GACvBgE,EF4CoB,SAAChE,GAAD,OAAuB,SAACgE,EAAyB6E,GACzEzH,EAAoBpB,GACfgF,MAAK,SAACmB,GACHnC,EA3CgB,SAAChE,GAAD,MAAwB,CAACwD,KAAM,cAAexD,MA2CrDmL,CAAanL,OAEzBmF,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,QElDXgG,CAAapL,KA2B1B,OACI,2BAAOZ,UAAWuK,KAAO0B,OACrB,+BACA,4BACI,oCACA,yCAEI,4BAAQjM,UAAWuK,KAAO2B,MAAO/D,QA1BpB,WACzBvD,EAAS2D,GAAe,gBACP3D,EAAjByD,EAA0BkB,GAAcrH,GAAoBqH,QAwBhD,OACA,4BAAQvJ,UAAWuK,KAAO2B,MAAO/D,QAhCnB,WAC1BvD,EAAS2D,GAAe,gBACP3D,EAAjByD,EAA0BkB,GAAcrH,GAAoBqH,QA8BhD,QAEJ,sCACA,mCACA,4BACI,4BAAQpB,QAAS,kBAAM6C,MAAvB,QAEJ,+BAGJ,+BAhCiBpB,EAAMuC,KAAI,SAAAC,GAAG,OAClC,wBAAIC,IAAKD,EAAIxJ,KACT,4BACI,kBAAC,GAAD,CAAehC,GAAIwL,EAAIxJ,IAAKjC,KAAMyL,EAAIzL,QAE1C,4BAAKyL,EAAInD,YACT,4BAAKmD,EAAIvI,SACT,kCACA,4BACI,4BAAQsE,QAAS,kBAAM2D,EAAkBM,EAAIxJ,OAA7C,WAEJ,4BAAI,kBAAC,IAAD,CAAM7C,GAAE,iBAAYqM,EAAIxJ,MAAxB,mB,wCCzEV0J,GAAYC,aAAW,CACzBC,KAAM,CACFC,MAAO,OACPC,MAAO,WAWFC,GAAelM,IAAMC,MAAK,SAACZ,GACpC,IAAM8M,EAAUN,KAMhB,OAAO,yBAAKtM,UAAWC,KAAM4M,WACzB,yBAAK7M,UAAWC,KAAMiK,OAClB,8BAAOpK,EAAMoK,MAAM,IACnB,8BAAOpK,EAAMoK,MAAM,KAEvB,kBAAC4C,GAAA,EAAD,CACI9M,UAAW4M,EAAQJ,KACnBjK,IAAKzC,EAAMyC,IACXD,IAAKxC,EAAMwC,IACX4H,MAAOpK,EAAMoK,MACbO,SAda,SAACsC,EAAYC,GAC9BlN,EAAMqK,SAAS6C,IAcXC,kBAAkB,OAClBC,kBAAgB,qB,4DC3BfC,GAAY1M,IAAMC,MAAK,WAAO,IAAD,EAEyBoE,aAAmD,SAAAC,GAAK,OAAIA,EAAM2E,kBAA1HtH,EAF+B,EAE/BA,KAAMD,EAFyB,EAEzBA,UAAWmG,EAFc,EAEdA,oBAAqBD,EAFP,EAEOA,eACvCnG,EAAS4C,aAA+B,SAAAC,GAAK,OAAIA,EAAMmD,QAAQtF,OAC/DgC,EAAWC,cAEXuI,EAAgBC,KAAKC,KAAKhF,EAAsBnG,GAYtD,OACI,6BACI,4BAAQsI,SAZK,SAACC,GAClB9F,EL4BsB,SAACzC,GAAD,MAAwB,CAACiC,KAAM,iBAAkBjC,aK5B9DoL,EAAgB7C,EAAEC,cAAcT,QACxBtF,EAAjByD,EAA0BkB,GAAcrH,GAAmBqH,QAWnD,4BAAQW,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,IAAf,MACA,4BAAQA,MAAO,IAAf,MACA,4BAAQA,MAAO,IAAf,OAEJ,yBAAKlK,UAAWC,KAAMuN,gBAClB,kBAACC,GAAA,EAAD,CAAYC,MAAON,EAAeV,MAAM,YAAYtK,KAAMA,EAAMqI,SAfpD,SAACsC,EAA6B3K,GAClDwC,EAAS4D,GAAUpG,IACFwC,EAAjByD,EAA0BkB,GAAcrH,GAAoBqH,cCPvDoE,GAAQlN,IAAMC,MAAK,WAE5BwF,QAAQC,IAAI,mBAFsB,IAI3BkC,EAAkBvD,aAAmD,SAAAC,GAAK,OAAIA,EAAM2E,kBAApFrB,eACDnG,EAAS4C,aAA+B,SAAAC,GAAK,OAAIA,EAAMmD,QAAQtF,OACjEgC,EAAWC,cAETyE,EAAgBxE,aAA+B,SAAAC,GAAK,OAAIA,EAAM6E,MAAMN,iBAEpE/E,EAASO,aAAgC,SAAAC,GAAK,OAAIA,EAAMC,MAAMT,UAEpEyC,qBAAU,WACFzC,GACiBK,EAAjByD,EAA0BkB,GAAcrH,GAAoBqH,QAEjE,CAAC3E,EAAUL,IAhBoB,MAkBRwF,mBAAS,CAAC,EAAG,IAlBL,oBAkB3BG,EAlB2B,KAkBpBC,EAlBoB,KAoBlCnD,qBAAU,WACNmD,EAAS,CAAC,EAAGb,MACd,CAACA,IAEJ,IAWMpE,EAASC,YAAU,CACrBC,cAAe,CACXwI,OAAQ,IAEZjI,SAAU,SAAAL,GACNV,ENf8B,CAACR,KAAM,UAAW7B,IMe9B2H,EAAM,KACxBtF,ENf8B,CAACR,KAAM,UAAW9B,IMe9B4H,EAAM,KACxBtF,ENlBwC,CAACR,KAAM,gBAAiB5B,SMkBzC8C,EAAOsI,SAE1BhJ,EADAyD,EACSkB,GAAcrH,GAEdqH,SAKrB,OACI,oCACI,0BAAM5D,SAAUT,EAAOmB,aAAcrG,UAAWC,KAAM4N,WAClD,kBAACrN,EAAD,eAAO8F,YAAa,SACb1F,GAAG,SACHD,KAAK,SACLyD,KAAK,QACDc,EAAOqB,cAAc,YAEhC,kBAACoG,GAAD,CAAczC,MAAOA,EACPC,SAAUA,EACV5H,IAAK,EACLD,IAAKgH,IACnB,6BACI,kBAACvI,EAAD,CAAQqD,KAAK,SAASzD,KAAM,aAGpC,6BAAK,kBAACmN,GAAA,EAAD,CAAUpF,QAASL,EAAgBoC,SA5CzB,WACdpC,GAKDzD,EAAS6D,IAAoB,IAC7B7D,EAAS2E,QALT3E,EAAS6D,IAAoB,IAC7B7D,EAAS2E,GAAcrH,IACvBiI,EAAS,CAAC,EAAEb,QAwCZ,YACA,qCACA,kBAACyB,GAAD,MACA,kBAACoC,GAAD,UCxFN5J,GAAiC,CACnCwK,MAAO,CAAC,CACJjK,IAAK,KACLlB,IAAK,KACLI,OAAQ,KACRE,aAAc,KACdU,QAAS,KACTP,MAAO,KACPN,SAAU,KACVmG,OAAQ,KACRF,MAAO,KACP5E,KAAM,KACNP,QAAS,KACT+E,QAAS,OAGboF,gBAAiB,KACjBC,SAAU,KACVC,SAAU,KACV/L,UAAW,MAiCFgM,GAAW,SAACrL,GAAD,OAAmB,SAAC8B,GACxC/B,EAAkBC,GACb8C,MAAK,SAAAmB,GACFnC,EATmC,CAACR,KAAM,YAAa2J,MASrChH,EAAIjB,UAEzBC,OAAM,SAACC,GACJ6D,MAAM7D,QAmCLoI,GAAc,SAAC/K,EAAeC,GAAhB,OAA2C,WAClEF,EAAmBC,EAAOC,GACrBsC,MAAK,SAAAmB,GACFb,QAAQC,IAAI,QAASY,MAExBhB,OAAM,SAAAC,GACHE,QAAQC,IAAI,OAAZ,eAAwBH,SC9F9B4E,GAASC,KAAiBC,MAOnBuD,GAAa5N,IAAMC,MAAK,SAACZ,GAGlC,IAAMiO,EAAQjJ,aAAa,SAACC,GAAD,OAAqBA,EAAMgJ,MAAMA,SACtDnJ,EAAWC,cAGXyJ,EAAiB,WACnB1D,GAAOK,KAAK,CACRC,MAAO,eACPC,KACI,oCACI,kBAAC3K,EAAD,CAAOI,GAAI,cAAe0F,YAAa,wBACvC,kBAAC9F,EAAD,CAAOI,GAAI,cAAe0F,YAAa,uBAE/C8E,kBAAkB,EAClBC,kBAAkB,OAClBC,mBAAoB,UACpBC,WAAY,WACR,MAAO,CACHxI,SAAWyI,SAASC,eAAe,eAAoCvB,MACvElH,OAASwI,SAASC,eAAe,eAAoCvB,UAG9EtE,MAAK,SAAC8F,GD0BW,IAAC5I,EAAeC,EAAkBC,ECzB9C0I,EAAOC,cACP/G,GDwBa9B,ECxBShD,EAAMgD,ODwBAC,ECxBQ2I,EAAOxB,MAAOnH,SDwBJC,ECxBc0I,EAAOxB,MAAOlH,ODwBT,SAAC4B,GAC9E/B,EAAiBC,EAAQC,EAAUC,GAC9B4C,MAAK,SAACmB,GACHnC,EAlBuC,CAACR,KAAM,WAAY2J,MAkBpChH,EAAIjB,KAAKyI,aAElCxI,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,UC7BZ8E,KAAKG,KAAK,mBAAoB,GAAI,gBAKxCuD,EAAoB,SAAC5N,GACvBgE,ED2BoB,SAAChE,GAAD,OAAuB,SAACgE,GAChD/B,EAAoBjC,GACfgF,MAAK,SAACmB,GACHnC,EA1BgB,SAAChE,GAAD,MAAwB,CAACwD,KAAM,cAAexD,MA0BrD6N,CAAa1H,EAAIjB,KAAK4I,YAAY9L,SAE9CmD,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,QCjCX2I,CAAa/N,KAGpBgO,EAAoB,SAAChO,EAAmBmC,EAAiBC,GAC3D4H,GAAOK,KAAK,CACRC,MAAO,mBACPC,KACI,oCACI,kBAAC3K,EAAD,CAAOI,GAAI,cAAe0F,YAAavD,IACvC,kBAACvC,EAAD,CAAOI,GAAI,cAAgB0F,YAAatD,KAEhDoI,kBAAkB,EAClBC,kBAAkB,OAClBC,mBAAoB,UACpBC,WAAY,WACR,MAAO,CACHxI,SAAWyI,SAASC,eAAe,eAAoCvB,MACvElH,OAASwI,SAASC,eAAe,eAAoCvB,UAG9EtE,MAAK,SAAC8F,GACDA,EAAOC,cACP/G,EDeY,SAAChE,EAAmBmC,EAAkBC,GAAtC,OAAyD,SAAC4B,GAClF/B,EAAoBjC,EAAImC,EAAUC,GAC7B4C,MAAK,SAACmB,GACHb,QAAQC,IAAIY,GACZnC,EAtCgB,SAAChE,EAAmBmC,EAAkBC,GAAtC,MAA0D,CAACoB,KAAM,cAAexD,KAAImC,WAAUC,UAsCrG6L,CAAajO,EAAImC,EAAUC,OAEvC+C,OAAM,SAACC,GACJE,QAAQC,IAAR,eAAgBH,QCtBH8I,CAAalO,EAAI8K,EAAOxB,MAAOnH,SAAU2I,EAAOxB,MAAOlH,SAChE8H,KAAKG,KAAK,mBAAoB,GAAI,gBAwB9C,OACI,6BACI,2BAAOjL,UAAWuK,KAAO0B,OACrB,+BACA,4BACI,wCACA,sCACA,qCACA,sCACA,mCACA,4BACI,4BAAQ9D,QAAS,kBAAKmG,MAAtB,QAEJ,6BACA,+BAGJ,+BAlCaP,EAAM5B,KAAI,SAAAC,GAAG,OAClC,wBAAIC,IAAKD,EAAIxJ,KACT,4BAAKwJ,EAAIrJ,UACT,4BAAKqJ,EAAIpJ,QACT,4BAAKoJ,EAAI/I,OACT,4BAAK+I,EAAIvI,SACT,kCACA,6BACA,4BACI,4BAAQsE,QAAW,kBAAKqG,EAAkBpC,EAAIxJ,OAA9C,WAEJ,4BACI,4BAAQuF,QAAW,kBAAKyG,EAAkBxC,EAAIxJ,IAAKwJ,EAAIrJ,SAAWqJ,EAAIpJ,UAAtE,qBClFH+L,GAAQ,WAAO,IAEjBjM,EAAUkM,cAAVlM,OACD8B,EAAWC,cAMjB,OAJAmC,qBAAU,WACNpC,EAASuJ,GAASrL,MACnB,CAAC8B,EAAU9B,IAGV,oCACI,qCACA,kBAACuL,GAAD,CAAYvL,OAAQA,IACpB,kBAAC,EAAD,CAAe/C,GAAE,iBAAY+C,GAAUzC,SAAU,W,iDCbvD4O,GAAS,CAAC,wCAAW,iCAAS,gEAAe,yDAAa,4BAE1DC,GAAU,SAACnB,GACb,IAAMoB,EAAMpB,EAAMqB,QAAO,SAACC,EAAKpM,GAAN,OAAeoM,GAAO,EAAIpM,EAAKI,QAAW,EAAIJ,EAAKI,SAAS,GAC/EiM,EAAOjC,KAAKkC,SAAWJ,EACvBpI,EAAMgH,EAAMqB,QAAO,SAACC,EAAkCpM,EAAMuM,GAC1D,IAAMC,EAASJ,EAAIF,KAAO,EAAIlM,EAAKI,QAAW,EAAIJ,EAAKI,OACvD,MAAO,CAAC8L,IAAKM,EAAQ7O,GAAI6O,EAASH,EAAOE,EAAIH,EAAIzO,MAEnD,CAACuO,IAAK,EAAGvO,IAAK,IAGpB,OAFAsF,QAAQC,IAAI,SAAUgJ,EAAKG,EAAMvI,GACjCb,QAAQC,IAAI4H,EAAMhH,EAAInG,GAAK,IACpBmN,EAAMhH,EAAInG,GAAK,IAGb8O,GAAY,WAAO,IAAD,EACO3F,oBAAkB,GADzB,oBACpB4F,EADoB,KACTC,EADS,KAEpB7B,EAASjJ,aAAyC,SAAAC,GAAK,OAAIA,EAAMgJ,SAAjEA,MAFoB,EAGDhE,oBAAkB,GAHjB,oBAGpB8F,EAHoB,KAGbC,EAHa,OAIG/F,oBAAS,GAJZ,oBAIpBgG,EAJoB,KAIXC,EAJW,KAKpBlN,EAAUkM,cAAVlM,OALoB,EAOHiH,mBAAoB,CACxCnH,IAAK,OACLM,aAAc,GACd0F,QAAS,GACT9E,IAAK,EAELd,OAAQ,cACRD,SAAU,cACVM,MAAO,EACP2F,MAAO,EAEP5E,KAAM,GACN8E,OAAQ,EAGRtF,QAAS,GACTC,QAAS,KAvBc,oBAOpBZ,EAPoB,KAOdgN,EAPc,KA0BrBrL,EAAWC,cAEjBmC,qBAAU,WAWN,OAVAd,QAAQC,IAAI,4BACZD,QAAQC,IAAI,QAAS4H,GAEjB8B,IACAjL,EAASuJ,GAASrL,IAClBgN,GAAS,IAGT/B,EAAMtI,OAAS,GAAGwK,EAAQf,GAAQnB,IAE/B,WACH7H,QAAQC,IAAI,mCAEjB,CAACvB,EAAU9B,EAAQiL,EAAO8B,IAE7B,IAWMK,EAAiB,yCAAG,WAAOhH,GAAP,UAAAiH,EAAA,sEAChBvL,EAASwJ,GAAYlF,EAAQjG,EAAKL,MADlB,OAEtBoN,GAAW,GAFW,2CAAH,sDAMvB,OACI,yBAAKhQ,UAAWC,KAAMmQ,UAClB,yBAAKpQ,UAAWC,KAAM8C,UAClB,0CACA,6BAAME,EAAKF,UACX,6BACI,kBAAChC,EAAD,CAAQoH,QAAS,kBAAMyH,GAAa,IAAOjP,KAAM,YAIxDgP,GACG,yBAAK3P,UAAWC,KAAM+C,QAClB,6BAAMC,EAAKD,QAEViM,GAAO9C,KAAI,SAACkE,EAAGb,GAAJ,OACR,kBAACzO,EAAD,CAAQsL,IAAK,SAAWmD,EAAGrH,QAAS,WAChC+H,EAAkBV,IACnB7O,KAAI,UAAK0P,EAAL,cAAYb,EAAZ,KAAkBzH,SAAUgI,OAGvC,6BAAK,kBAAChP,EAAD,CAAQoH,QArCd,WACXyH,GAAa,GACbI,GAAW,GAEPjC,EAAMtI,OAAS,GACfwK,EAAQf,GAAQnB,KAgCsBpN,KAAM,OAAQoH,UAAWgI,QC3F9DO,GAAS,WAClB,OACI,yBAAKtQ,UAAWC,IAAMsQ,QAClB,kBAAC,IAAD,CAAOxH,K3BhBU,S2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SAClC,kBAAC,IAAD,CAAOzH,K3BhBa,Y2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOzH,K3BhBqB,qB2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SAC7C,kBAAC,IAAD,CAAOzH,K3BhBgB,gB2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SACxC,kBAAC,IAAD,CAAOzH,K3BhBY,W2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SACpC,kBAAC,IAAD,CAAOzH,K3BhBU,S2BgBGyH,OAAQ,kBAAM,kBAAC7C,GAAD,SAClC,kBAAC,IAAD,CAAO5E,K3BhBU,iB2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,SAClC,kBAAC,IAAD,CAAOzH,K3BhBU,iB2BgBGyH,OAAQ,kBAAM,kBAAC,GAAD,WCnBjCC,GAAO,WAChB,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,GAAD,QCgBGC,GAjBH,WACRxK,QAAQC,IAAI,OACZ,IAAMvB,EAAWC,cAMjB,OAJAmC,qBAAU,WACNpC,GvB2DoB,SAACA,GACzBtD,IACKsE,MAAK,SAAAC,GACFjB,EAASV,EAAqB2B,EAASC,OACvClB,EAASJ,GAAU,OAEtBuB,OAAM,SAAAC,GACH,IAAIC,EAAQD,EAAIH,SAAWG,EAAIH,SAASC,KAAKG,MAAQD,EAAIjE,QACzDmE,QAAQC,IAAIF,WuBlEjB,CAACrB,IAGA,yBAAK5E,UAAW,OACZ,kBAAC,IAAD,KACI,kBAAC,GAAD,SCNI2Q,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBClBAxN,GAAe,GCYjByN,GAAWC,aAAgB,CAC3BjM,M1BDwB,WAAmE,IAAlED,EAAiE,uDAAvCxB,EAAc2N,EAAyB,uCAC1F,OAAQA,EAAO9M,MACX,IAAK,oBACD,OAAO,eACAW,EADP,CAEIR,OAAQ2M,EAAO3M,SAEvB,QACI,OAAOQ,I0BNfoM,YDZ8B,WAA6C,IAA5CpM,EAA2C,uDAA9BxB,GAAc2N,EAAgB,uCAGlE,OAFAA,EAAO9M,KAEAW,GCUfyC,gBpBJmC,WAAiE,IAAhEzC,EAA+D,uDAArCxB,GAAc2N,EAAuB,uCACnG,OAAQA,EAAO9M,MACX,IAAK,2BACD,OAAO,eACAW,EADP,CAEIpD,MAAOuP,EAAOvP,QAEtB,IAAK,uBACD,OAAO,eACAoD,EADP,CAEIqC,eAAgB8J,EAAOlO,SAE/B,IAAK,oBACD,OAAO,eACA+B,EADP,CAEI0B,YAAayK,EAAOjL,QAE5B,QACI,OAAOlB,IoBbf6B,StBN2B,WAAkE,IAAjE7B,EAAgE,uDAAxDxB,GAAc2N,EAA0C,uCAC5F,OAAQA,EAAO9M,MACX,IAAK,gBACD,OAAO,eACAW,EADP,CAEIyB,aAAc0K,EAAO1K,aACrBC,YAAayK,EAAOjL,MAAQiL,EAAOjL,MAAQ,KAGnD,QACI,OAAOlB,IsBHfmD,Q5BC0B,WAAkE,IAAjEnD,EAAgE,uDAAxDxB,EAAc2N,EAA0C,uCAC3F,OAAQA,EAAO9M,MACX,IAAK,kBACD,OAAO,eAAIW,EAAX,GAAqBmM,EAAO/M,MAEhC,QAAU,OAAOY,I4BLrBE,O3BXyB,WAAkE,IAAjEF,EAAgE,uDAAxDxB,EAAc2N,EAA0C,uCAC1F,OAAQA,EAAO9M,MACX,IAAK,aACD,OAAO,eAAIW,EAAX,CAAkBV,OAAQ6M,EAAO7M,SAErC,QACI,OAAOU,I2BMf6E,MfgBwB,WAAkE,IAAjE7E,EAAgE,uDAAxDxB,GAAc2N,EAA0C,uCACzF,OAAQA,EAAO9M,MACX,IAAK,YACD,OAAO,eAAIW,EAAX,GAAqBmM,EAAOtH,OAChC,IAAK,WACD,OAAO,eAAI7E,EAAX,CAAkB4D,UAAU,CAAEuI,EAAOtF,MAAV,oBAAmB7G,EAAM4D,cACxD,IAAK,cACD,OAAO,eACA5D,EADP,CAEI4D,UAAW5D,EAAM4D,UAAUyI,QAAO,SAAAnO,GAAI,OAAIA,EAAKL,MAAQsO,EAAOtQ,QAEtE,IAAK,cACD,OAAO,eACAmE,EADP,CAEI4D,UAAW5D,EAAM4D,UAAUwD,KAAI,SAAClJ,GAAD,OAAUA,EAAKL,MAAQsO,EAAOtQ,GAApB,eAA6BqC,EAA7B,CAAmCtC,KAAMuQ,EAAOvQ,OAAQsC,OAEzG,QACI,OAAO8B,IehCfgJ,MTOwB,WAAkE,IAAjEhJ,EAAgE,uDAAxDxB,GAAc2N,EAA0C,uCACzF,OAAQA,EAAO9M,MACX,IAAK,YACD,OAAO,eAAIW,EAAX,GAAqBmM,EAAOnD,OAChC,IAAK,WACD,OAAO,eAAIhJ,EAAX,CAAkBgJ,MAAM,CAAEmD,EAAOnD,OAAV,oBAAoBhJ,EAAMgJ,UACrD,IAAK,cACD,OAAO,eACAhJ,EADP,CAEIgJ,MAAOhJ,EAAMgJ,MAAMqD,QAAO,SAACnO,GAAD,OAAUA,EAAKL,MAAQsO,EAAOtQ,QAEhE,IAAK,cACD,OAAO,eACAmE,EADP,CAEIgJ,MAAOhJ,EAAMgJ,MAAM5B,KAAI,SAAClJ,GAAD,OAAUA,EAAKL,MAAQsO,EAAOtQ,GAApB,eAA6BqC,EAA7B,CAAmCF,SAAUmO,EAAOnO,SAAUC,OAAQkO,EAAOlO,SAAUC,OAEhI,QACI,OAAO8B,ISvBf2E,ehBToC,WAA2E,IAA1E3E,EAAyE,uDAAjEqD,GAAc8I,EAAmD,uCAC9G,OAAQA,EAAO9M,MACX,IAAK,gBACD,OAAO,eAAIW,EAAX,CAAkBvC,SAAU0O,EAAO1O,WAEvC,IAAK,UACD,OAAO,eAAIuC,EAAX,CAAkBxC,IAAK2O,EAAO3O,MAElC,IAAK,UACD,OAAO,eAAIwC,EAAX,CAAkBzC,IAAK4O,EAAO5O,MAElC,IAAK,iBACD,OAAO,eAAIyC,EAAX,CAAkB1C,UAAW6O,EAAO7O,YAExC,IAAK,WACD,OAAO,eAAI0C,EAAX,CAAkB3C,KAAM8O,EAAO9O,OAEnC,IAAK,iBACD,OAAO,eAAI2C,EAAX,CAAkB5C,UAAW+O,EAAO/O,YAExC,IAAK,uBACD,OAAO,eAAI4C,EAAX,CAAkBsD,eAAgB6I,EAAOxI,UAE7C,IAAK,wBACD,OAAO,eAAI3D,EAAX,CAAkBuD,oBAAqB4I,EAAOvH,aAElD,QACI,OAAO5E,MgBbfsM,GAAQC,aAAYN,GAAUO,aAAgBC,OAEnCH,MAGfT,OAAOS,MAAQA,GCvBfI,IAASjB,OACL,kBAAC,IAAMkB,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,GAAD,QAGR7F,SAASC,eAAe,SH6HtB,kBAAmBkG,WACrBA,UAAUC,cAAcC,MACrBjM,MAAK,SAAAkM,GACJA,EAAaC,gBAEdhM,OAAM,SAAAE,GACLC,QAAQD,MAAMA,EAAMlE,a,mBIhJ5BiQ,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,MAAQ,uB,mBCA9FD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,KAAO,uBAAuB,MAAQ,0B,mBCAxGD,EAAOC,QAAU,CAAC,cAAgB,6BAA6B,MAAQ,uB,mBCAvED,EAAOC,QAAU,CAAC,YAAc,sCAAsC,WAAa,qCAAqC,MAAQ,kC,mBCAhID,EAAOC,QAAU,CAAC,SAAW,wBAAwB,SAAW,wBAAwB,OAAS,wB,mBCAjGD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,OAAS,gC,mBCA9DD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,MAAQ,4BAA4B,KAAO,6B,mBCAzGD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,wB,mBCA3BD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,mBCA3DD,EAAOC,QAAU,CAAC,QAAU,0B,mBCA5BD,EAAOC,QAAU,CAAC,UAAY,2B","file":"static/js/main.dec97c14.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {cards, login, newPassword, packs, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n            <NavLinkCommon to={packs} linkName={'Packs'}/>\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';\r\nexport const packs: string = '/packs';\r\nexport const cards: string = '/cards/:packId';\r\nexport const learn: string = '/learn/:packId';","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType =\r\n    React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> & {\r\n    name?: string,\r\n    id?: string\r\n\r\n};\r\n\r\nexport const Input : FC<InputPropsType> = React.memo (({name,id,...rest}) => {\r\n    return <input className={style.input} {...rest} id={id} ></input>\r\n})","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button: FC<ButtonPropsType> = React.memo(({name, ...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n})","import axios from 'axios';\r\nimport {initialStateGetRequestType} from '../m2-bll/reducers/dataForGetRequestReducer';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<AuthResponseType>('/auth/me', {})\r\n    },\r\n    login(authUserData: AuthUserData) {\r\n        return instance.post<AuthResponseType>('/auth/login', {...authUserData})\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/me')\r\n    },\r\n}\r\n\r\nexport const registrationAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password});\r\n    }\r\n}\r\n\r\nexport const forgotAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<ResponseType>('/auth/forgot', {\r\n            email: email,\r\n            from: 'test-front-admin',\r\n            message: `<div style=\"background-color: gold; padding: 15px\">Password recover link:\r\n                    <a href=\"https://alekseidarafeichyk.github.io/cards/#/new_password/$token$\">link</a>\r\n                </div>`\r\n        })\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(requestParameters:initialStateGetRequestType, userID=''){\r\n        const {pageCount,page,sortPacks,max,min,packName} = requestParameters\r\n        return instance.get(`/cards/pack?packName=${packName}&min=${min}&max=${max}&pageCount=${pageCount}&page=${page}&sortPacks=${sortPacks}&user_id=${userID}`)\r\n    },\r\n    addPack(packName: string) {\r\n        return instance.post('/cards/pack', {cardsPack: {name: packName}})\r\n    },\r\n    deletePack(id: string | null) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(id: string | null, name: string) {\r\n        return instance.put('/cards/pack', {cardsPack: {_id: id, name}})\r\n    },\r\n}\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, pageCount = 4, page = 1) {\r\n        return instance.get(`/cards/card?pageCount=${pageCount}&page=${page}&cardsPack_id=${packId}`)\r\n    },\r\n    addCard(packId: string, question:string, answer:string) {\r\n        return instance.post('/cards/card', {card: {cardsPack_id: packId, question, answer}})\r\n    },\r\n    deleteCard(id: string | null) {\r\n        return instance.delete(`/cards/card?id=${id}`)\r\n    },\r\n    updateCard(id: string | null, question: string, comments: string) {\r\n        return instance.put('/cards/card', {card: {_id: id, question, comments}})\r\n    },\r\n}\r\n\r\nexport const learnAPI = {\r\n    sendGrade(grade: number | null, card_id: string | null) {\r\n        return instance.put('/cards/grade', {grade, card_id})\r\n    }\r\n}\r\n\r\n\r\n// Types\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    __v: number,\r\n    token: string,\r\n    tokenDeathTime: number\r\n    avatar?: string\r\n}\r\nexport type AuthUserData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n}","import {AuthResponseType} from '../../m3-dal/api';\r\n\r\nconst InitialState : AuthResponseType = {\r\n    _id:'',\r\n    email:'',\r\n    rememberMe:false,\r\n    isAdmin:false,\r\n    name:'',\r\n    verified:false,\r\n    publicCardPacksCount:0,\r\n    created:'',\r\n    updated:'',\r\n    __v:0,\r\n    token:'',\r\n    tokenDeathTime: 0,\r\n    avatar: 'Some avatar'\r\n}\r\n\r\nexport const profileReducer = (state = InitialState, action: ActionsType): AuthResponseType => {\r\n    switch (action.type) {\r\n        case 'SET-DELETE-USER': {\r\n            return {...state, ...action.user}\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setDeleteUserProfile = (user: AuthResponseType) =>({type: 'SET-DELETE-USER', user} as const)\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setDeleteUserProfile>","import {RequestStatusType} from './registerReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    status: 'idle'\r\n}\r\n\r\n\r\nexport const loaderReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const SetStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'SET_STATUS', status} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof SetStatusAC>\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n}","import {authAPI, AuthUserData} from '../../m3-dal/api';\r\nimport {Dispatch} from 'redux';\r\nimport {setDeleteUserProfile} from './profileReducer';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState = {\r\n    isAuth: false,\r\n    status: 'idle'\r\n}\r\n\r\ntype initialStateType = typeof InitialState\r\n\r\nexport const loginReducer = (state: initialStateType = InitialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET_IS_AUTH':\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\nconst setIsAuth = (isAuth: boolean) => ({type: 'LOGIN/SET_IS_AUTH', isAuth} as const)\r\n\r\n// Thunks\r\nexport const LogIn = (authUserData: AuthUserData) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.login({...authUserData})\r\n        .then(response => {\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n}\r\nexport const LogOut = () => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            const defaultUserProfile = {\r\n                _id: '',\r\n                email: '',\r\n                rememberMe: false,\r\n                isAdmin: false,\r\n                name: '',\r\n                verified: false,\r\n                publicCardPacksCount: 0,\r\n                created: '',\r\n                updated: '',\r\n                __v: 0,\r\n                token: '',\r\n                tokenDeathTime: 0,\r\n                avatar: 'Some avatar'\r\n            }\r\n            dispatch(SetStatusAC('succeeded'))\r\n            dispatch(setDeleteUserProfile(defaultUserProfile))\r\n            dispatch(setIsAuth(false))\r\n        }).catch(err => {\r\n        dispatch(SetStatusAC('failed'))\r\n        let error = err.response ? err.response.data.error : err.message\r\n        console.log(error)\r\n    })\r\n\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            dispatch(setDeleteUserProfile(response.data))\r\n            dispatch(setIsAuth(true))\r\n        })\r\n        .catch(err => {\r\n            let error = err.response ? err.response.data.error : err.message\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n// Types\r\ntype ActionsTypes =\r\n    | ReturnType<typeof setIsAuth>\r\n    | ReturnType<typeof setDeleteUserProfile>\r\n    | ReturnType<typeof SetStatusAC>\r\n","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return <div className={style.ldsRing}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogIn} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from './Login.module.css'\r\nimport {profile} from '../../../routes/RoutePass';\r\nimport {validateLoginForm} from '../../../../m4-utils/validators/validators';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport type AuthData = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector((state: RootState) => state.login.isAuth)\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateLoginForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LogIn({...values}))\r\n\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={profile}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.formContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input\r\n                    id={'email'}\r\n                    type={'text'}\r\n                    placeholder={'Enter your email'}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input\r\n                    id={'password'}\r\n                    placeholder={'password'}\r\n                    type={'password'}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                remember me <input\r\n                type={'checkbox'}\r\n                {...formik.getFieldProps('rememberMe')}\r\n            />\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name=\"Sign In\"/>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {RegisterErrorType} from '../../m1-ui/Main/Pages/p2-register/Register';\r\nimport {AuthData} from '../../m1-ui/Main/Pages/p1-login/Login';\r\n\r\ntype valuesRegisterForm = {\r\n    email : string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const validateRegisterForm = (values: valuesRegisterForm, errors:RegisterErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n   if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n\r\n    if (!values?.repeatPassword) {\r\n        errors.repeatPassword = 'Field is required';\r\n    } else if (values.repeatPassword.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validateLoginForm = (values:valuesRegisterForm,errors: AuthData) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Field is required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be 5 characters or more';\r\n    }\r\n}\r\n\r\nexport const validatePasswordRecoveryForm = (values:valuesRegisterForm,errors: {email?: string}) => {\r\n    if (!values.email) {\r\n        errors.email = 'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../m3-dal/api';\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    isRegistered: false,\r\n    serverError: '',\r\n    status: 'idle'\r\n}\r\n\r\nexport const registerReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER_USER': {\r\n            return {\r\n                ...state,\r\n                isRegistered: action.isRegistered,\r\n                serverError: action.error ? action.error : ''\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const RegisterUserAC = (isRegistered: boolean, error = '') =>\r\n    ({type: 'REGISTER_USER', isRegistered, error} as const);\r\n\r\n//thunks\r\nexport const RegisterUserTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC('loading'));\r\n    registrationAPI.registration(email, password)\r\n        .then(res => {\r\n            dispatch(SetStatusAC('succeeded'));\r\n            dispatch(RegisterUserAC(true));\r\n        })\r\n        .catch(error => {\r\n            dispatch(SetStatusAC('failed'));\r\n            dispatch(RegisterUserAC(false, error.response.data.error));\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    isRegistered: boolean,\r\n    serverError: string,\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof RegisterUserAC>\r\n    | ReturnType<typeof SetStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React, {useEffect} from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport style from './Register.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    InitialStateType,\r\n    RegisterUserAC,\r\n    RegisterUserTC,\r\n    RequestStatusType\r\n} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validateRegisterForm} from '../../../../m4-utils/validators/validators';\r\n\r\nexport type RegisterErrorType = {\r\n    email?: string | undefined\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistered, serverError} = useSelector<RootState, InitialStateType>(state => state.register)\r\n    const status = useSelector<RootState,RequestStatusType>(state => state.loader.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },validate: (values) => {\r\n            const errors: RegisterErrorType = {};\r\n            validateRegisterForm(values ,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterUserTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    useEffect(()=>{\r\n     return ()=>{\r\n         dispatch(RegisterUserAC(false))\r\n     }\r\n    },[dispatch])\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const errorElement = serverError ? <div className={style.error}>{serverError}</div> : null\r\n    return (\r\n        <div className={style.containerForm}>\r\n            <form className={style.form} onSubmit={formik.handleSubmit}>\r\n                <Input type={'text'}\r\n                       id={'email'}\r\n                       placeholder={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'password'}\r\n                       placeholder={'Password'}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n                <Input type={'password'}\r\n                       id={'repeatPassword'}\r\n                       placeholder={'Repeat password'}\r\n                       {...formik.getFieldProps('repeatPassword')}\r\n                />\r\n                {formik.errors.repeatPassword ? <div className={style.error}>{formik.errors.repeatPassword}</div> : null}\r\n                {status === 'loading' ?\r\n                    <Loader/>\r\n                    :\r\n                    <Button type=\"submit\" name={'Register'}/>\r\n                }\r\n            </form>\r\n            {errorElement}\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {forgotAPI} from \"../../m3-dal/api\";\r\nimport {SetStatusAC} from './loaderReducer';\r\n\r\nconst InitialState: InitialStateType = {\r\n    email: \"\",\r\n    serverResponse: \"\",\r\n    serverError: \"\",\r\n    status: \"idle\"\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = InitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"EMAIL_TO_CHANGE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        case \"SAVE_SERVER_RESPONSE\":\r\n            return {\r\n                ...state,\r\n                serverResponse: action.answer\r\n            }\r\n        case \"SAVE_SERVER_ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setEmailToChangePasswordAC = (email: string) => ({type: 'EMAIL_TO_CHANGE_PASSWORD', email} as const)\r\nexport const SaveServerResponseAC = (answer: string) => ({type: 'SAVE_SERVER_RESPONSE', answer} as const)\r\nexport const SaveServerErrorAC = (error: string) => ({type: 'SAVE_SERVER_ERROR', error} as const)\r\n\r\nexport const passwordRecoveryTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(SetStatusAC(\"loading\"))\r\n    forgotAPI.forgot(email)\r\n        .then((res) => {\r\n            dispatch(SetStatusAC(\"succeeded\"))\r\n            dispatch(setEmailToChangePasswordAC(email))\r\n            dispatch(SaveServerResponseAC(res.data.info))\r\n        })\r\n        .catch((err: serverErrorType) => {\r\n            dispatch(SetStatusAC(\"failed\"))\r\n            dispatch(SaveServerErrorAC(err.response.data.error))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = {\r\n    email: string\r\n    serverResponse: string\r\n    serverError: string\r\n    status: RequestStatusType\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setEmailToChangePasswordAC>\r\n    | ReturnType<typeof SaveServerResponseAC>\r\n    | ReturnType<typeof SaveServerErrorAC>\r\n\r\ntype serverErrorType = {\r\n    response: { data: dataServerErrorType }\r\n}\r\ntype dataServerErrorType = {\r\n    email: string\r\n    error: string\r\n    in: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {useFormik} from 'formik';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {\r\n    InitialStateType,\r\n    passwordRecoveryTC,\r\n    SaveServerErrorAC,\r\n    SaveServerResponseAC,\r\n} from '../../../../m2-bll/reducers/passwordRecoveryReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport style from './PasswordRecovery.module.css'\r\nimport {Loader} from '../../../common/Loader/Loader';\r\nimport {validatePasswordRecoveryForm} from '../../../../m4-utils/validators/validators';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const {serverResponse, serverError} = useSelector<RootState, InitialStateType>(state => state.passwordRecover)\r\n    const status = useSelector<RootState,RequestStatusType>(state =>state.loader.status )\r\n    const dispatch = useDispatch()\r\n\r\n    const clearServerResponseAndError = () => {\r\n        dispatch(SaveServerResponseAC(\"\"))\r\n        dispatch(SaveServerErrorAC(\"\"))\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate : (values: { email: string }) => {\r\n            const errors: { email?: string } = {};\r\n            validatePasswordRecoveryForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={style.forgotStyle}>\r\n            <form onSubmit={formik.handleSubmit} className={style.formForgot}>\r\n                <div>Your Email:</div>\r\n                <Input placeholder={\"Email\"}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       type=\"email\"\r\n                       onFocus={clearServerResponseAndError}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <Button type=\"submit\" name={\"Send\"}\r\n                            disabled={status === \"loading\" || !!serverError || !!serverResponse}/>\r\n                </div>\r\n            </form>\r\n            {status === \"loading\" ? <Loader/> : null}\r\n            {serverResponse || serverError}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {login} from '../../../routes/RoutePass';\r\nimport {AuthResponseType} from '../../../../m3-dal/api';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport {LogOut} from '../../../../m2-bll/reducers/loginReducer';\r\nimport {RequestStatusType} from '../../../../m2-bll/reducers/registerReducer';\r\nimport {Loader} from '../../../common/Loader/Loader';\r\n\r\nexport const Profile = () => {\r\n    const isAuth = useSelector<RootState, boolean>(state => state.login.isAuth)\r\n    const user = useSelector<RootState, AuthResponseType>(state => state.profile)\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.loader.status)\r\n    const dispatch = useDispatch()\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(LogOut())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>name : {user.name}</span>\r\n            </div>\r\n            <div>\r\n                <span>avatar : {user.avatar}</span>\r\n            </div>\r\n            <div>\r\n                <span>publicCardPacksCount : {user.publicCardPacksCount}</span>\r\n            </div>\r\n            {status === 'loading' ? <Loader/> :\r\n                <Button onClick={logoutHandler} name={'Logout'}/>}\r\n        </div>\r\n    )\r\n}","const initialState: initialStateGetRequestType = {\r\n    packName: \"\",\r\n    min: 0,\r\n    max: 100,\r\n    sortPacks: \"0cardsCount\",\r\n    page: 1,\r\n    pageCount: 4,\r\n    checkedMyPacks: false,\r\n    cardPacksTotalCount: 1,\r\n}\r\n\r\n\r\nexport const dataForGetRequestReducer = (state = initialState, action: ActionType): initialStateGetRequestType => {\r\n    switch (action.type) {\r\n        case \"SET_PACK_NAME\": {\r\n            return {...state, packName: action.packName}\r\n        }\r\n        case \"SET_MIN\": {\r\n            return {...state, min: action.min}\r\n        }\r\n        case \"SET_MAX\": {\r\n            return {...state, max: action.max}\r\n        }\r\n        case \"SET_SORT_PACKS\": {\r\n            return {...state, sortPacks: action.sortPacks}\r\n        }\r\n        case \"SET_PAGE\": {\r\n            return {...state, page: action.page}\r\n        }\r\n        case \"SET_PAGE_COUNT\": {\r\n            return {...state, pageCount: action.pageCount}\r\n        }\r\n        case \"SET_CHECKED_MY_PACKS\": {\r\n            return {...state, checkedMyPacks: action.checked}\r\n        }\r\n        case \"SET_PACKS_TOTAL_COUNT\": {\r\n            return {...state, cardPacksTotalCount: action.TotalCount}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setPackNameAC = (packName: string) => ({type: 'SET_PACK_NAME', packName} as const)\r\nexport const setMinAC = (min: number) => ({type: 'SET_MIN', min} as const)\r\nexport const setMaxAC = (max: number) => ({type: 'SET_MAX', max} as const)\r\nexport const setSortPacksAC = (sortPacks: sortPacksType) => ({type: 'SET_SORT_PACKS', sortPacks} as const)\r\nexport const setPageAC = (page: number) => ({type: 'SET_PAGE', page} as const)\r\nexport const setPageCountAC = (pageCount: number) => ({type: 'SET_PAGE_COUNT', pageCount} as const)\r\nexport const setCheckedMyPacksAC = (checked: boolean) => ({type: 'SET_CHECKED_MY_PACKS', checked} as const)\r\nexport const setPacksTotalCountAC = (TotalCount: number) => ({type: 'SET_PACKS_TOTAL_COUNT', TotalCount} as const)\r\n\r\n// types\r\nexport type initialStateGetRequestType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: sortPacksType\r\n    page: number\r\n    pageCount: number\r\n    checkedMyPacks: boolean\r\n    cardPacksTotalCount: number\r\n}\r\nexport type sortPacksType = \"1cardsCount\" | \"0cardsCount\"\r\n\r\ntype ActionType = ReturnType<typeof setPackNameAC>\r\n    | ReturnType<typeof setMinAC>\r\n    | ReturnType<typeof setMaxAC>\r\n    | ReturnType<typeof setSortPacksAC>\r\n    | ReturnType<typeof setPageAC>\r\n    | ReturnType<typeof setPageCountAC>\r\n    | ReturnType<typeof setCheckedMyPacksAC>\r\n    | ReturnType<typeof setPacksTotalCountAC>\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {packsAPI} from '../../m3-dal/api';\r\nimport {setPacksTotalCountAC, setPageAC} from './dataForGetRequestReducer';\r\nimport {RootState} from '../store';\r\n\r\nconst InitialState: InitialStateType = {\r\n    cardPacks: [{\r\n        _id: null,\r\n        user_id: null,\r\n        user_name: null,\r\n        private: null,\r\n        name: null,\r\n        path: null,\r\n        grade: null,\r\n        shots: null,\r\n        cardsCount: null,\r\n        type: null,\r\n        rating: null,\r\n        created: null,\r\n        updated: null,\r\n        more_id: null,\r\n        __v: null,\r\n        deckCover: null\r\n    },\r\n    ],\r\n    page: 0,\r\n    pageCount: 0,\r\n    cardPacksTotalCount: 0,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 0,\r\n    token: null,\r\n    tokenDeathTime: null,\r\n}\r\n\r\n\r\nexport const packsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, ...action.packs}\r\n        case 'ADD_PACK':\r\n            return {...state, cardPacks: [action.pack, ...state.cardPacks]}\r\n        case 'DELETE_PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter(card => card._id !== action.id)\r\n            }\r\n        case 'UPDATE_PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.map((card) => card._id === action.id ? {...card, name: action.name} : card)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPacks = (packs: InitialStateType) => ({type: 'SET_PACKS', packs} as const)\r\nexport const addingPackAC = (pack: cardPack) => ({type: 'ADD_PACK', pack} as const)\r\nexport const deletePackAC = (id: string | null) => ({type: 'DELETE_PACK', id} as const)\r\nexport const updatePackAC = (id: string | null, name: string) => ({type: 'UPDATE_PACK', id, name} as const)\r\n\r\n//thunks\r\n\r\nexport const getPacksThunk = (userId?: string) => (dispatch: Dispatch, getState: () => RootState) => {\r\n    const state = getState()\r\n\r\n    const requestParameters = {\r\n        packName: state.dataGetRequest.packName,\r\n        min: state.dataGetRequest.min,\r\n        max: state.dataGetRequest.max,\r\n        sortPacks: state.dataGetRequest.sortPacks,\r\n        page: state.dataGetRequest.page,\r\n        pageCount: state.dataGetRequest.pageCount,\r\n        checkedMyPacks: state.dataGetRequest.checkedMyPacks,\r\n        cardPacksTotalCount: state.dataGetRequest.cardPacksTotalCount,\r\n    }\r\n\r\n    packsAPI.getPacks(requestParameters, userId)\r\n        .then(res => {\r\n            dispatch(setPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n            dispatch(setPageAC(res.data.page))\r\n            dispatch(setPacks(res.data))\r\n        })\r\n        .catch((err) => {\r\n            alert(err)\r\n        })\r\n}\r\n\r\nexport const addingPackTC = (packName: string) => (dispatch: Dispatch, getState: () => RootState) => {\r\n    packsAPI.addPack(packName)\r\n        .then((res: resType) => {\r\n            dispatch(addingPackAC(res.data.newCardsPack))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (id: string | null) => (dispatch: Dispatch<any>, getState: () => RootState) => {\r\n    packsAPI.deletePack(id)\r\n        .then((res) => {\r\n            dispatch(deletePackAC(id))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (id: string | null, name: string) => (dispatch: Dispatch) => {\r\n    packsAPI.updatePack(id, name)\r\n        .then((res) => {\r\n            dispatch(updatePackAC(id, name))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    cardPacks: Array<cardPack>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string | null\r\n    tokenDeathTime: number | null\r\n}\r\nexport type cardPack = {\r\n    _id: string | null\r\n    user_id: string | null\r\n    user_name: string | null\r\n    private: boolean | null\r\n    name: string | null\r\n    path: string | null\r\n    grade: number | null\r\n    shots: number | null\r\n    cardsCount: number | null\r\n    type: string | null\r\n    rating: number | null\r\n    created: string | null\r\n    updated: string | null\r\n    more_id: string | null\r\n    __v: number | null\r\n    deckCover: null\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof setPacks>\r\n    | ReturnType<typeof addingPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof deletePackAC>\r\n\r\ntype resType = {\r\n    data: newCardsPackType\r\n}\r\ntype newCardsPackType = {\r\n    newCardsPack: cardPack\r\n}","// @flow\r\nimport React, {useState} from 'react';\r\nimport Styles from \"../Table/Table.module.css\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {updatePackTC} from \"../../../m2-bll/reducers/packsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype Props = {\r\n    id: string | null\r\n    name: string\r\n};\r\nexport const EditableField = (props: Props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState(props.name)\r\n    const  dispatch = useDispatch()\r\n\r\n\r\n    const onEnableEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onDisableEditMode = (id:string) => {\r\n        dispatch(updatePackTC(id, value))\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onUpdateValue = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <>\r\n                <Button className={Styles.editButton} name={'ok'} onClick={() => onDisableEditMode(props.id!)}/>\r\n                <Input value={value} onChange={onUpdateValue}/>\r\n            </>\r\n           : <>\r\n                {props.name}\r\n                <Button className={Styles.editButton} name={'edit'} onClick={() => onEnableEditMode()}/>\r\n            </>\r\n\r\n    )\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Styles from './Table.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {\r\n    addingPackTC,\r\n    cardPack,\r\n    deletePackTC,\r\n    getPacksThunk,\r\n} from '../../../m2-bll/reducers/packsReducer';\r\nimport {\r\n    initialStateGetRequestType,\r\n    setSortPacksAC\r\n} from \"../../../m2-bll/reducers/dataForGetRequestReducer\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {EditableField} from \"../EditableField/EditableField\";\r\n\r\n// Modal windows library\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport Swal from \"sweetalert2\";\r\nconst MySwal = withReactContent(Swal)\r\n\r\n\r\nexport const Table = React.memo(() => {\r\n\r\n\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    const {checkedMyPacks} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const packs = useSelector<RootState, Array<cardPack>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onClickAddPack = () => {\r\n       MySwal.fire({\r\n                title: 'Add new Pack',\r\n                html: <Input id={'swal-input1'} placeholder={'Enter pack name'}/> ,\r\n                showCancelButton: true,\r\n                confirmButtonText: `Save`,\r\n                confirmButtonColor: '#26c17e',\r\n                preConfirm: () => {\r\n                    return {\r\n                    packName: (document.getElementById('swal-input1') as HTMLInputElement).value\r\n                    }\r\n                }\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    dispatch(addingPackTC(result.value!.packName))\r\n                    Swal.fire('Pack was added', '', 'success')\r\n                }\r\n            })\r\n        }\r\n\r\n    const onClickDeletePack = (id: string | null) => {\r\n        dispatch(deletePackTC(id))\r\n    }\r\n\r\n    const onClickDescendingSort = () => {\r\n        dispatch(setSortPacksAC('0cardsCount'))\r\n        checkedMyPacks ? dispatch(getPacksThunk(userID)) : dispatch(getPacksThunk())\r\n    }\r\n\r\n    const onClickAscendingSort = () => {\r\n        dispatch(setSortPacksAC('1cardsCount'))\r\n        checkedMyPacks ? dispatch(getPacksThunk(userID)) : dispatch(getPacksThunk())\r\n    }\r\n\r\n    const renderRows = () => packs.map(row =>\r\n        <tr key={row._id}>\r\n            <td>\r\n                <EditableField id={row._id} name={row.name!}/>\r\n            </td>\r\n            <td>{row.cardsCount}</td>\r\n            <td>{row.updated}</td>\r\n            <td>''</td>\r\n            <td>\r\n                <button onClick={() => onClickDeletePack(row._id)}>delete</button>\r\n            </td>\r\n            <td><Link to={`/cards/${row._id}`}>cards</Link></td>\r\n        </tr>\r\n    )\r\n    return (\r\n        <table className={Styles.table}>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>\r\n                    CardsCount\r\n                    <button className={Styles.arrow} onClick={onClickAscendingSort}>/\\</button>\r\n                    <button className={Styles.arrow} onClick={onClickDescendingSort}>\\/</button>\r\n                </th>\r\n                <th>Update</th>\r\n                <th>Url</th>\r\n                <th>\r\n                    <button onClick={() => onClickAddPack()}>Add</button>\r\n                </th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {renderRows()}\r\n            </tbody>\r\n        </table>\r\n    );\r\n})","import React from 'react';\r\nimport {Slider} from '@material-ui/core';\r\nimport style from './CommonSlider.module.css'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        color: 'black',\r\n    }\r\n});\r\n\r\ntype Slider2Type = {\r\n    value: number[]\r\n    setValue: (newValue: number[]) => void\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport const CommonSlider = React.memo((props: Slider2Type) => {\r\n    const classes = useStyles();\r\ndebugger\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        props.setValue(newValue as number[]);\r\n    };\r\n\r\n    return <div className={style.container}>\r\n        <div className={style.value}>\r\n            <span>{props.value[0]}</span>\r\n            <span>{props.value[1]}</span>\r\n        </div>\r\n        <Slider\r\n            className={classes.root}\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.value}\r\n            onChange={handleChange}\r\n            valueLabelDisplay=\"auto\"\r\n            aria-labelledby=\"range-slider\"\r\n        />\r\n    </div>\r\n})","import React, {ChangeEvent} from 'react';\r\nimport style from './Paginator.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../../m2-bll/store';\r\nimport {getPacksThunk,} from '../../../../../m2-bll/reducers/packsReducer';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport {\r\n    initialStateGetRequestType,\r\n    setPageAC,\r\n    setPageCountAC\r\n} from '../../../../../m2-bll/reducers/dataForGetRequestReducer';\r\n\r\nexport const Paginator = React.memo(() => {\r\n\r\n    const {page, pageCount, cardPacksTotalCount, checkedMyPacks} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    const dispatch = useDispatch()\r\n\r\n    const HowManyCounts = Math.ceil(cardPacksTotalCount / pageCount)\r\n\r\n    const changeSelect = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(setPageCountAC(+e.currentTarget.value))\r\n        checkedMyPacks ? dispatch(getPacksThunk(userID)) :dispatch(getPacksThunk())\r\n    }\r\n\r\n    const ChangePaginator = (event: ChangeEvent<unknown>, page: number) => {\r\n        dispatch(setPageAC(page))\r\n        checkedMyPacks ? dispatch(getPacksThunk(userID)) : dispatch(getPacksThunk())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={changeSelect}>\r\n                <option value={4}>4</option>\r\n                <option value={5}>5</option>\r\n                <option value={10}>10</option>\r\n                <option value={20}>20</option>\r\n                <option value={30}>30</option>\r\n            </select>\r\n            <div className={style.containerPages}>\r\n                <Pagination count={HowManyCounts} color=\"secondary\" page={page} onChange={ChangePaginator}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Table} from '../../../common/Table/Table';\r\nimport {CommonSlider} from '../../../common/CommonSlider/CommonSlider';\r\nimport {useFormik} from 'formik';\r\nimport {Input} from '../../../common/Input/Input';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport style from './Packs.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getPacksThunk,} from '../../../../m2-bll/reducers/packsReducer';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport {RootState} from '../../../../m2-bll/store';\r\nimport {Paginator} from './Paginator/Paginator';\r\nimport {\r\n    initialStateGetRequestType,\r\n    setCheckedMyPacksAC,\r\n    setMaxAC,\r\n    setMinAC,\r\n    setPackNameAC,\r\n} from '../../../../m2-bll/reducers/dataForGetRequestReducer';\r\n\r\nexport const Packs = React.memo(() => {\r\n\r\n    console.log('Packs rendering')\r\n\r\n    const {checkedMyPacks} = useSelector<RootState, initialStateGetRequestType>(state => state.dataGetRequest)\r\n    const userID = useSelector<RootState, string>(state => state.profile._id)\r\n    let dispatch = useDispatch()\r\n\r\n    const maxCardsCount = useSelector<RootState, number>(state => state.packs.maxCardsCount)\r\n\r\n    const isAuth = useSelector<RootState, boolean>(state => state.login.isAuth)\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            checkedMyPacks ? dispatch(getPacksThunk(userID)) : dispatch(getPacksThunk())\r\n        }\r\n    }, [dispatch, isAuth])\r\n\r\n    const [value, setValue] = useState([0, 0])\r\n\r\n    useEffect(() => {\r\n        setValue([0, maxCardsCount])\r\n    }, [maxCardsCount])\r\n\r\n    const ChangeCheckbox = () => {\r\n        if (!checkedMyPacks) {\r\n            dispatch(setCheckedMyPacksAC(true))\r\n            dispatch(getPacksThunk(userID))\r\n            setValue([0,maxCardsCount])\r\n        } else {\r\n            dispatch(setCheckedMyPacksAC(false))\r\n            dispatch(getPacksThunk())\r\n        }\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            search: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setMinAC(value[0]))\r\n            dispatch(setMaxAC(value[1]))\r\n            dispatch(setPackNameAC(values.search))\r\n            if (checkedMyPacks) {\r\n                dispatch(getPacksThunk(userID))\r\n            } else {\r\n                dispatch(getPacksThunk())\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit} className={style.formStyle}>\r\n                <Input placeholder={'Search'}\r\n                       id=\"search\"\r\n                       name=\"search\"\r\n                       type=\"text\"\r\n                       {...formik.getFieldProps('search')}\r\n                />\r\n                <CommonSlider value={value}\r\n                              setValue={setValue}\r\n                              min={0}\r\n                              max={maxCardsCount}/>\r\n                <div>\r\n                    <Button type=\"submit\" name={'Search'}/>\r\n                </div>\r\n            </form>\r\n            <div><Checkbox checked={checkedMyPacks} onChange={ChangeCheckbox}/>My cards</div>\r\n            <h1>Packs</h1>\r\n            <Table/>\r\n            <Paginator/>\r\n        </>\r\n    )\r\n})","import { cardsAPI, learnAPI } from \"../../m3-dal/api\"\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst InitialState: InitialStateType = {\r\n    cards: [{\r\n        __v: null,\r\n        _id: null,\r\n        answer: null,\r\n        cardsPack_id: null,\r\n        created: null,\r\n        grade: null,\r\n        question: null,\r\n        rating: null,\r\n        shots: null,\r\n        type: null,\r\n        updated: null,\r\n        user_id: null\r\n    },\r\n    ],\r\n    cardsTotalCount: null,\r\n    maxGrade: null,\r\n    minGrade: null,\r\n    pageCount: null,\r\n\r\n}\r\n\r\n\r\nexport const cardsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CARDS':\r\n            return {...state, ...action.cards}\r\n        case \"ADD_CARD\":\r\n            return {...state, cards: [action.cards, ...state.cards]}\r\n        case \"DELETE_CARD\":\r\n            return {\r\n                ...state,\r\n                cards: state.cards.filter((card) => card._id !== action.id)\r\n            }\r\n        case \"UPDATE_CARD\":\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map((card) => card._id === action.id ? {...card, question: action.question, answer: action.answer} : card)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// //actions\r\nexport const setCards = (cards: cardsType) => ({type: 'SET_CARDS', cards} as const)\r\nexport const addingCardAC = (cards: cardsType) => ({type: 'ADD_CARD', cards} as const)\r\nexport const updateCardAC = (id: string | null, question: string, answer: string) => ({type: 'UPDATE_CARD', id, question, answer} as const)\r\nexport const deleteCardAC = (id: string | null) => ({type: 'DELETE_CARD', id} as const)\r\n\r\n//thunks\r\nexport const getCards = (packId:string) => (dispatch: Dispatch) => {\r\n    cardsAPI.getCards(packId)\r\n        .then(res => {\r\n            dispatch(setCards(res.data))\r\n        })\r\n        .catch((err) => {\r\n            alert(err)\r\n        })\r\n}\r\n\r\nexport const addingCardTC = (packId:string, question: string, answer: string) => (dispatch: Dispatch) => {\r\n    cardsAPI.addCard(packId, question, answer)\r\n        .then((res) => {\r\n            dispatch(addingCardAC(res.data.newCard))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (id: string | null) => (dispatch: Dispatch) => {\r\n    cardsAPI.deleteCard(id)\r\n        .then((res) => {\r\n            dispatch(deleteCardAC(res.data.deletedCard._id))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (id: string | null, question: string, answer: string) => (dispatch: Dispatch) => {\r\n    cardsAPI.updateCard(id, question, answer)\r\n        .then((res) => {\r\n            console.log(res)\r\n            dispatch(updateCardAC(id, question, answer))\r\n        })\r\n        .catch((err) => {\r\n            console.log({...err})\r\n        })\r\n}\r\n\r\nexport const sendGradeTC = (grade: number, card_id: string | null) => () => {\r\n    learnAPI.sendGrade(grade, card_id)\r\n        .then(res => {\r\n            console.log(\"then \", res)\r\n        })\r\n        .catch(err => {\r\n            console.log(\"err \", {...err})\r\n        })\r\n}\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    cards: Array<cardsType>\r\n    cardsTotalCount: number | null,\r\n    maxGrade: number | null,\r\n    minGrade: number | null,\r\n    pageCount: number | null,\r\n\r\n}\r\nexport type cardsType = {\r\n    answer: string | null\r\n    question: string | null\r\n    cardsPack_id: string | null\r\n    grade: number | null\r\n    rating: number | null\r\n    shots: number | null\r\n    type: string | null\r\n    user_id: string | null\r\n    created: string | null\r\n    updated: string | null\r\n    __v: number | null\r\n    _id: string | null\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof setCards>\r\n    | ReturnType<typeof addingCardAC>\r\n    | ReturnType<typeof updateCardAC>\r\n    | ReturnType<typeof deleteCardAC>\r\n","import React from 'react';\r\nimport Styles from './Table.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../m2-bll/store';\r\nimport {addingCardTC, deleteCardTC, updateCardTC} from \"../../../m2-bll/reducers/cardsReducer\";\r\nimport {Input} from \"../Input/Input\";\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport Swal from \"sweetalert2\";\r\nconst MySwal = withReactContent(Swal)\r\n\r\n\r\ntype PropsType = {\r\n    packId: string\r\n}\r\n\r\nexport const TableCards = React.memo((props:PropsType) => {\r\n\r\n\r\n    const cards = useSelector(((state:RootState) => state.cards.cards))\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onClickAddCard = () => {\r\n        MySwal.fire({\r\n            title: 'Add new Card',\r\n            html:\r\n                <>\r\n                    <Input id={'swal-input1'} placeholder={'Enter your question'}/>\r\n                    <Input id={'swal-input2'} placeholder={'Enter your answer'}/>\r\n                </>,\r\n            showCancelButton: true,\r\n            confirmButtonText: `Save`,\r\n            confirmButtonColor: '#26c17e',\r\n            preConfirm: () => {\r\n                return {\r\n                    question: (document.getElementById('swal-input1') as HTMLInputElement).value,\r\n                    answer: (document.getElementById('swal-input2') as HTMLInputElement).value\r\n                }\r\n            }\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                dispatch(addingCardTC(props.packId, result.value!.question, result.value!.answer))\r\n                Swal.fire('Card was created', '', 'success')\r\n            }\r\n        })\r\n    }\r\n\r\n    const onClickDeleteCard = (id: string | null) => {\r\n        dispatch(deleteCardTC(id))\r\n    }\r\n\r\n    const onClickUpdateCard = (id: string | null, question:string, answer:string) => {\r\n        MySwal.fire({\r\n            title: 'Update your Card',\r\n            html:\r\n                <>\r\n                    <Input id={'swal-input1'} placeholder={question}/>\r\n                    <Input id={'swal-input2'}  placeholder={answer}/>\r\n                </>,\r\n            showCancelButton: true,\r\n            confirmButtonText: `Save`,\r\n            confirmButtonColor: '#26c17e',\r\n            preConfirm: () => {\r\n                return {\r\n                    question: (document.getElementById('swal-input1') as HTMLInputElement).value,\r\n                    answer: (document.getElementById('swal-input2') as HTMLInputElement).value\r\n                }\r\n            }\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                dispatch(updateCardTC(id, result.value!.question, result.value!.answer))\r\n                Swal.fire('Card was created', '', 'success')\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const renderRows = () => cards.map(row =>\r\n        <tr key={row._id}>\r\n            <td>{row.question}</td>\r\n            <td>{row.answer}</td>\r\n            <td>{row.grade}</td>\r\n            <td>{row.updated}</td>\r\n            <td>''</td>\r\n            <td></td>\r\n            <td>\r\n                <button onClick = {()=> onClickDeleteCard(row._id)}>delete</button>\r\n            </td>\r\n            <td>\r\n                <button onClick = {()=> onClickUpdateCard(row._id, row.question!, row.answer!)}>update</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <table className={Styles.table}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>Grade</th>\r\n                    <th>Update</th>\r\n                    <th>Url</th>\r\n                    <th>\r\n                        <button onClick={()=> onClickAddCard()}>Add</button>\r\n                    </th>\r\n                    <th></th>\r\n                    <th></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {renderRows()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n})","import React, {useEffect} from \"react\";\r\nimport {TableCards} from \"../../../common/Table/TableCards\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getCards} from \"../../../../m2-bll/reducers/cardsReducer\";\r\nimport {NavLinkCommon} from \"../../../common/Navlink/NavlinkCommon\";\r\n\r\n\r\nexport const Cards = () => {\r\n\r\n    const {packId} = useParams()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getCards(packId))\r\n    }, [dispatch, packId])\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <TableCards packId={packId}/>\r\n            <NavLinkCommon to={`/learn/${packId}`} linkName={\"PLAY\"}/>\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {cardsType, getCards, InitialStateType, sendGradeTC} from \"../../../../m2-bll/reducers/cardsReducer\";\r\nimport {RootState} from \"../../../../m2-bll/store\";\r\nimport {Button} from \"../../../common/Button/Button\";\r\nimport style from \"./Learn.module.css\"\r\n\r\nconst grades = ['не знал', 'забыл', 'долго думал', 'перепутал', 'знал'];\r\n\r\nconst getCard = (cards: Array<cardsType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade!) * (6 - card.grade!), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade!) * (6 - card.grade!);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n    console.log(cards[res.id + 1])\r\n    return cards[res.id + 1];\r\n}\r\n\r\nexport const LearnPage = () => {\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const {cards} = useSelector<RootState, InitialStateType>(state => state.cards);\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [disable, setDisable] = useState(false)\r\n    const {packId} = useParams();\r\n\r\n    const [card, setCard] = useState<cardsType>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n        user_id: \"\",\r\n        __v: 0,\r\n\r\n        answer: 'answer fake',\r\n        question: 'loading....',\r\n        grade: 0,\r\n        shots: 0,\r\n\r\n        type: '',\r\n        rating: 0,\r\n\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('LearnContainer useEffect');\r\n        console.log('cards', cards)\r\n\r\n        if (first) {\r\n            dispatch(getCards(packId));\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 1) setCard(getCard(cards));\r\n\r\n        return () => {\r\n            console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, packId, cards, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n        setDisable(false);\r\n\r\n        if (cards.length > 0) {\r\n            setCard(getCard(cards));\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    const sendRatingOnClick = async (rating: number) => {\r\n        await dispatch(sendGradeTC(rating, card._id))\r\n        setDisable(true)\r\n        // SendModal(\"Оценка отправлена\")\r\n    }\r\n\r\n    return (\r\n        <div className={style.AllLearn}>\r\n            <div className={style.question}>\r\n                <div>Question:</div>\r\n                <div>{card.question}</div>\r\n                <div>\r\n                    <Button onClick={() => setIsChecked(true)} name={\"check\"}/>\r\n                </div>\r\n            </div>\r\n\r\n            {isChecked && (\r\n                <div className={style.answer}>\r\n                    <div>{card.answer}</div>\r\n\r\n                    {grades.map((g, i) => (\r\n                        <Button key={'grade-' + i} onClick={() => {\r\n                            sendRatingOnClick(i)\r\n                        }} name={`${g}(${++i})`} disabled={disable}/>\r\n                    ))}\r\n\r\n                    <div><Button onClick={onNext} name={\"next\"} disabled={!disable}/></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {cards, learn, login, newPassword, packs, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/p1-login/Login';\r\nimport {Register} from '../Main/Pages/p2-register/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/p3-passwordRecovery/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/p4-newPassword/NewPassword';\r\nimport {Profile} from '../Main/Pages/p5-profile/Profile';\r\nimport {Packs} from \"../Main/Pages/p6-packs/Packs\";\r\nimport {Cards} from \"../Main/Pages/p7-cards/Cards\";\r\nimport {LearnPage} from \"../Main/Pages/p8-learn/Learn\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={() => <Login/>}/>\r\n            <Route path={register} render={() => <Register/>}/>\r\n            <Route path={passwordRecovery} render={() => <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={() => <NewPassword/>}/>\r\n            <Route path={profile} render={() => <Profile/>}/>\r\n            <Route path={packs} render={() => <Packs/>}/>\r\n            <Route path={cards} render={() => <Cards/>}/>\r\n            <Route path={learn} render={() => <LearnPage/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Main} from './Main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\nimport {authMe} from '../m2-bll/reducers/loginReducer';\r\n\r\nconst App = () => {\r\n    console.log('App')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecoveryReducer';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\nimport {loaderReducer} from './reducers/loaderReducer';\r\nimport {packsReducer} from './reducers/packsReducer';\r\nimport {cardsReducer} from './reducers/cardsReducer';\r\nimport {dataForGetRequestReducer} from \"./reducers/dataForGetRequestReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    loader: loaderReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    dataGetRequest: dataForGetRequestReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './n1-main/m2-bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2zNDP\",\"editButton\":\"Table_editButton__20u32\",\"arrow\":\"Table_arrow__1Y0Sd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"Register_containerForm__1TkN8\",\"form\":\"Register_form__3jhg_\",\"error\":\"Register_error__3hqSw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Login_formContainer__WWFxh\",\"error\":\"Login_error__rS7O4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotStyle\":\"PasswordRecovery_forgotStyle__25qDt\",\"formForgot\":\"PasswordRecovery_formForgot__2bykr\",\"error\":\"PasswordRecovery_error__2zQep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllLearn\":\"Learn_AllLearn__3Pl4W\",\"question\":\"Learn_question__1uY7P\",\"answer\":\"Learn_answer__Anj1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__21JlT\",\"active\":\"NavlinkCommon_active__2J4uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CommonSlider_container__I_JcE\",\"value\":\"CommonSlider_value__30TGB\",\"root\":\"CommonSlider_root__hWbh9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kZgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__1ggEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1GLt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P0gp\",\"active\":\"Button_active__15H3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Loader_ldsRing__37cMZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"Packs_formStyle__24Oxg\"};"],"sourceRoot":""}