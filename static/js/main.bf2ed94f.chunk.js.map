{"version":3,"sources":["n1-main/m1-ui/common/Navlink/NavlinkCommon.module.css","n1-main/m1-ui/Main/Header/Header.module.css","n1-main/m1-ui/routes/Route.module.css","n1-main/m1-ui/common/Navlink/NavlinkCommon.tsx","n1-main/m1-ui/Main/Header/Header.tsx","n1-main/m1-ui/routes/RoutePass.ts","n1-main/m1-ui/Main/Pages/Login.tsx","n1-main/m1-ui/Main/Pages/Register.tsx","n1-main/m1-ui/Main/Pages/PasswordRecovery.tsx","n1-main/m1-ui/Main/Pages/NewPassword.tsx","n1-main/m1-ui/Main/Pages/Profile.tsx","n1-main/m1-ui/routes/Route.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/loginReducer.ts","n1-main/m2-bll/reducers/newPasswordReducer.ts","n1-main/m2-bll/reducers/passwordRecovery.ts","n1-main/m2-bll/reducers/registerReducer.ts","n1-main/m2-bll/reducers/profileReducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","NavLinkCommon","props","to","className","style","link","activeClassName","active","linkName","Header","header","Login","Register","PasswordRecovery","NewPassword","Profile","Routes","routes","path","render","Main","App","Boolean","window","location","hostname","match","InitialState","reducers","combineReducers","login","state","action","type","newPassword","passwordRecover","register","profile","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,4BAA4B,OAAS,gC,mBCA9DD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,wB,gNCQdC,EAAiB,SAACC,GAC3B,OAAO,kBAAC,IAAD,CAASC,GAAID,EAAMC,GAAIC,UAAWC,IAAMC,KAAMC,gBAAiBF,IAAMG,QAASN,EAAMO,WCLlFC,EAAS,WAClB,OACI,yBAAKN,UAAWC,IAAMM,QAClB,kBAAC,EAAD,CAAeR,GCRE,SDQSM,SAAU,UACpC,kBAAC,EAAD,CAAeN,GCRK,YDQSM,SAAU,aACvC,kBAAC,EAAD,CAAeN,GCRa,qBDQSM,SAAU,sBAC/C,kBAAC,EAAD,CAAeN,GCRQ,gBDQSM,SAAU,iBAC1C,kBAAC,EAAD,CAAeN,GCRI,WDQSM,SAAU,c,wBEVrCG,EAAQ,WACjB,OAAO,uCCDEC,EAAW,WACpB,OAAO,0CCDEC,EAAmB,WAC5B,OAAO,kDCDEC,EAAc,WACvB,OAAO,6CCDEC,EAAU,WACnB,OAAO,yCCOEC,EAAS,WAClB,OACI,yBAAKb,UAAWC,IAAMa,QAClB,kBAAC,IAAD,CAAOC,KNbU,SMaGC,OAAQ,kBAAK,kBAAC,EAAD,SACjC,kBAAC,IAAD,CAAOD,KNba,YMaGC,OAAQ,kBAAK,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOD,KNbqB,qBMaGC,OAAQ,kBAAK,kBAAC,EAAD,SAC5C,kBAAC,IAAD,CAAOD,KNbgB,gBMaGC,OAAQ,kBAAK,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KNbY,WMaGC,OAAQ,kBAAK,kBAAC,EAAD,WCZlCC,EAAO,WAChB,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCQGC,EAZH,WACR,OACI,yBAAKlB,UAAW,OAEZ,kBAAC,IAAD,KACI,kBAAC,EAAD,SCEImB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCQjBC,EAAWC,YAAgB,CAC3BC,MLPwB,WAA6C,IAA5CC,EAA2C,uDAA9BJ,EAAcK,EAAgB,uCAEtD,OADNA,EAAOC,KACMF,GKMrBG,YJR8B,WAA6C,IAA5CH,EAA2C,uDAA9BJ,EAAcK,EAAgB,uCAGlE,OAFAA,EAAOC,KAEAF,GIMfI,gBHTmC,WAA4C,IAA3CJ,EAA0C,uDAA9BJ,EAAcK,EAAgB,uCAEhE,OADNA,EAAOC,KACMF,GGQrBK,SFV2B,WAA6C,IAA5CL,EAA2C,uDAA9BJ,EAAcK,EAAgB,uCAEzD,OADNA,EAAOC,KACMF,GESrBM,QDX0B,WAA6C,IAA5CN,EAA2C,uDAA9BJ,EAAcK,EAAgB,uCAExD,OADNA,EAAOC,KACMF,KCcrBO,EAAQC,YAAYX,EAAUY,YAAgBC,MAEnCH,IAGff,OAAOe,MAAQA,ECffI,IAASvB,OACP,kBAAC,IAAMwB,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAGRM,SAASC,eAAe,SP6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf2ed94f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"NavlinkCommon_link__21JlT\",\"active\":\"NavlinkCommon_active__2J4uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kZgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Route_routes__1ggEc\"};","import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './NavlinkCommon.module.css'\r\n\r\ntype NavlinkPropsType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport const NavLinkCommon  = (props: NavlinkPropsType) => {\r\n    return <NavLink to={props.to} className={style.link} activeClassName={style.active}>{props.linkName}</NavLink>\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLinkCommon} from '../../common/Navlink/NavlinkCommon';\r\nimport {login, newPassword, passwordRecovery, profile, register} from '../../routes/RoutePass';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLinkCommon to={login} linkName={'Login'}/>\r\n            <NavLinkCommon to={register} linkName={'Register'}/>\r\n            <NavLinkCommon to={passwordRecovery} linkName={'Password Recovery'}/>\r\n            <NavLinkCommon to={newPassword} linkName={'New Password'}/>\r\n            <NavLinkCommon to={profile} linkName={'Profile'}/>\r\n\r\n        </div>)\r\n}","export const login: string = '/login';\r\nexport const register: string = '/register';\r\nexport const passwordRecovery: string = '/password_recovery';\r\nexport const newPassword: string = '/new_password';\r\nexport const profile: string = '/profile';","import React from 'react';\r\n\r\nexport const Login = () => {\r\n    return <div>login</div>\r\n}","import React from 'react';\r\n\r\nexport const Register = () => {\r\n    return <div>register</div>\r\n}","import React from 'react';\r\n\r\nexport const PasswordRecovery = () => {\r\n    return <div>PasswordRecovery</div>\r\n}","import React from 'react';\r\n\r\nexport const NewPassword = () => {\r\n    return <div>NewPassword</div>\r\n}","import React from 'react';\r\n\r\nexport const Profile = () => {\r\n    return <div>Profile</div>\r\n}","import React from 'react';\r\nimport style from './Route.module.css'\r\nimport {Route} from 'react-router-dom';\r\nimport {login, newPassword, passwordRecovery, profile, register} from './RoutePass';\r\nimport {Login} from '../Main/Pages/Login';\r\nimport {Register} from '../Main/Pages/Register';\r\nimport {PasswordRecovery} from '../Main/Pages/PasswordRecovery';\r\nimport {NewPassword} from '../Main/Pages/NewPassword';\r\nimport { Profile } from '../Main/Pages/Profile';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.routes}>\r\n            <Route path={login} render={()=> <Login/>}/>\r\n            <Route path={register} render={()=> <Register/>}/>\r\n            <Route path={passwordRecovery} render={()=> <PasswordRecovery/>}/>\r\n            <Route path={newPassword} render={()=> <NewPassword/>}/>\r\n            <Route path={profile} render={()=> <Profile/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Header} from './Header/Header';\r\nimport {Routes} from '../routes/Route';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Main} from './Main/Main';\nimport {HashRouter} from 'react-router-dom';\n\nconst App = () => {\n    return (\n        <div className={'App'}>\n\n            <HashRouter>\n                <Main/>\n            </HashRouter>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const InitialState = {}\r\n\r\nexport const loginReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const newPasswordReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default :\r\n            return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const passwordRecoveryReducer = (state: any= InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const registerReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","const InitialState = {}\r\n\r\nexport const profileReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        default : return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {loginReducer} from './reducers/loginReducer';\r\nimport {newPasswordReducer} from './reducers/newPasswordReducer';\r\nimport {passwordRecoveryReducer} from './reducers/passwordRecovery';\r\nimport {registerReducer} from './reducers/registerReducer';\r\nimport {profileReducer} from './reducers/profileReducer';\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover : passwordRecoveryReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './n1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}